{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"changelog/","text":"Changelog \u00b6 Flutter Developers Guide \u00b6 8.2.5 _ March 6, 2022 \u00b6 Fixed #3596 : Mermaid not working when headline with name 'Mermaid' present Fixed #3643 : Reduce time to render pages with thousands of code blocks Fixed #3665 : Missing styles for Mermaid.js flowcharts cluster labels Initial release","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#flutter-developers-guide","text":"","title":"Flutter Developers Guide"},{"location":"changelog/#8.2.5","text":"Fixed #3596 : Mermaid not working when headline with name 'Mermaid' present Fixed #3643 : Reduce time to render pages with thousands of code blocks Fixed #3665 : Missing styles for Mermaid.js flowcharts cluster labels Initial release","title":"8.2.5 _ March 6, 2022"},{"location":"es/guia/","text":"Flutters Developer Guide \u00b6 El prop\u00f3sito de este documento es servir de gu\u00eda a los equipos de desarrollo en el proceso de la construcci\u00f3n de software, estable, mantenible, robusto y escalable con Dart y Flutter. Para tal fin se ha recopilado en este documento los lineamientos iniciales a tener en cuenta a la hora de encarar el desarrollo de un proyecto Flutter. En esta, guia para desarrolladores Encontraras: Cheatsheet: Una gu\u00eda para consulta r\u00e1pida de los puntos tratados en esta documentation. Dart Basico: Si ya sabes programar esta secci\u00f3n te servir\u00e1 de gu\u00eda r\u00e1pida para entender el funcionamiento de Dart. Flutter Basico: Al Igual que la anterior esta secci\u00f3n te servir\u00e1 para entender r\u00e1pidamente el funcionamiento de Flutter. Gu\u00eda de Estilos: Aqu\u00ed te detallo una gu\u00eda de estilos para utilizar en tus desarrollos. Esto te ayudara a tener un c\u00f3digo limpio y f\u00e1cil de leer. Buenas Pr\u00e1cticas: Una gu\u00eda de buenas pr\u00e1cticas b\u00e1sicas para el desarrollo de aplicaciones Flutter. Git & Git Flow: Modelos de branch y convenciones en el uso de Git CI/CD: Gu\u00eda para configurar un entorno CI/CD simple y efectivo. El archivo README.md: El archivo README.md de tus aplicaciones flutter, es una herramienta muy util para transmitir informaci\u00f3n al equipo de desarrollo. El Archivo CHANGELOG.md: Este archivo te servir\u00e1 para llevar un control de los cambios que hay en tu c\u00f3digo. El Archivo WIDGETTREE.md: Este archivo te servir\u00e1 para llevar un control de los cambios que hay en tu c\u00f3digo. Material Stores (Google Play / Apple Store): Aqu\u00ed encontraras el material b\u00e1sico que necesitas para publicar tus apps en las stores (No es una gu\u00eda de publicaci\u00f3n) Ejemplos: Flutter viene con una gran variedad de ejemplos que puedes utilizar. En esta secci\u00f3n descubrir\u00e1s como utilizarlos. Enlaces Interesantes: Listado de enlaces interesantes y recursos utiles para el desarrollo Dart/Flutter","title":"Flutters Developer Guide"},{"location":"es/guia/#flutters-developer-guide","text":"El prop\u00f3sito de este documento es servir de gu\u00eda a los equipos de desarrollo en el proceso de la construcci\u00f3n de software, estable, mantenible, robusto y escalable con Dart y Flutter. Para tal fin se ha recopilado en este documento los lineamientos iniciales a tener en cuenta a la hora de encarar el desarrollo de un proyecto Flutter. En esta, guia para desarrolladores Encontraras: Cheatsheet: Una gu\u00eda para consulta r\u00e1pida de los puntos tratados en esta documentation. Dart Basico: Si ya sabes programar esta secci\u00f3n te servir\u00e1 de gu\u00eda r\u00e1pida para entender el funcionamiento de Dart. Flutter Basico: Al Igual que la anterior esta secci\u00f3n te servir\u00e1 para entender r\u00e1pidamente el funcionamiento de Flutter. Gu\u00eda de Estilos: Aqu\u00ed te detallo una gu\u00eda de estilos para utilizar en tus desarrollos. Esto te ayudara a tener un c\u00f3digo limpio y f\u00e1cil de leer. Buenas Pr\u00e1cticas: Una gu\u00eda de buenas pr\u00e1cticas b\u00e1sicas para el desarrollo de aplicaciones Flutter. Git & Git Flow: Modelos de branch y convenciones en el uso de Git CI/CD: Gu\u00eda para configurar un entorno CI/CD simple y efectivo. El archivo README.md: El archivo README.md de tus aplicaciones flutter, es una herramienta muy util para transmitir informaci\u00f3n al equipo de desarrollo. El Archivo CHANGELOG.md: Este archivo te servir\u00e1 para llevar un control de los cambios que hay en tu c\u00f3digo. El Archivo WIDGETTREE.md: Este archivo te servir\u00e1 para llevar un control de los cambios que hay en tu c\u00f3digo. Material Stores (Google Play / Apple Store): Aqu\u00ed encontraras el material b\u00e1sico que necesitas para publicar tus apps en las stores (No es una gu\u00eda de publicaci\u00f3n) Ejemplos: Flutter viene con una gran variedad de ejemplos que puedes utilizar. En esta secci\u00f3n descubrir\u00e1s como utilizarlos. Enlaces Interesantes: Listado de enlaces interesantes y recursos utiles para el desarrollo Dart/Flutter","title":"Flutters Developer Guide"},{"location":"es/guia/01_cheatsheet/","text":"Flutter Developer Guide CheatSheet \u00b6 Este archivo sirve para consulta r\u00e1pida sobre formato de nombres, branch, commits y estimaci\u00f3n de tareas. Sino estas familizarizado te recomendamos leer las guias completas antes de comenzar a utilizar este CheatSheet. Convenciones de nombres \u00b6 Directorios y carpetas: snake_case Archivos: snake_case Archivos Changelog.md y Readme.md: UPPERCASE Tipo de Branch: lowercase Prefijos Branch: kebab-case Clases, Enums, TypeDef, extentiones: UpperCamelCase Funciones y M\u00e9todos: lowerCamelCase Variables, Argumentos, Propiedades: lowerCamelCase Tipos de Commits \u00b6 Prefijos que utilizamos al realizar commits. add : C\u00f3digo Nuevo que se agrega al repo. change update : Cambio que se realiza en el codigo. fix , hotfix bugfix : Correcci\u00f3n que se realizo en el C\u00f3digo. docs : Cambio en la documentaci\u00f3n. (sin cambio de c\u00f3digo) refactor : Refactor en el C\u00f3digo deprecate : C\u00f3digo que esta destinado a desaparecer, pero que aun se usa. delete : C\u00f3digo que se elimino del repositorio. style : Cambios en el codigo que mejoran su lectura. Scope de Commits \u00b6 El Scope de los commits varia dependiendo de la arquitectura del proyecto, pero en l\u00edneas generales, el Scope es brindado por el nombre de los directorios que contienen los archivos modificados. Prefijos de Branches \u00b6 Permanentes \u00b6 - master/ main/ - qa/ - test/ - production/ - development/ develop/ Temporales \u00b6 - feature/ - bugfix/ - fix/ - hotfix/ - change/ - update/ - remove/ - merge/ - experimental/ - build/ - release/ - deprecate/ - security/ - performance/ - cicd/ Estimaci\u00f3n de Tareas \u00b6 Para la estimacion de tareas nos basamos en la planning poker. El cual utiliza la sucesion de Fibonachi Estimacion Descripcion 0 Tarea trivial 1 Poco mas de medio d\u00eda 2 Poco mas de un d\u00eda 3 Casi dos d\u00edas 5 Poco mas de 3 d\u00edas 8 Una semana 13 Una semana y media 21 Dos semanas o mas Keyboard Shortcuts Reference \u00b6 IntelliJ IDEA / Android Studio \u00b6 MacOs Windows/Linux Flutter IDE cheat sheet MacOS Flutter IDE cheat sheet Windows & Linux Visual Studio Code \u00b6 Windows MacOs Linux Flutter IDE cheat sheet Windows & Linux","title":"Cheatsheet"},{"location":"es/guia/01_cheatsheet/#flutter-developer-guide-cheatsheet","text":"Este archivo sirve para consulta r\u00e1pida sobre formato de nombres, branch, commits y estimaci\u00f3n de tareas. Sino estas familizarizado te recomendamos leer las guias completas antes de comenzar a utilizar este CheatSheet.","title":"Flutter Developer Guide CheatSheet"},{"location":"es/guia/01_cheatsheet/#convenciones-de-nombres","text":"Directorios y carpetas: snake_case Archivos: snake_case Archivos Changelog.md y Readme.md: UPPERCASE Tipo de Branch: lowercase Prefijos Branch: kebab-case Clases, Enums, TypeDef, extentiones: UpperCamelCase Funciones y M\u00e9todos: lowerCamelCase Variables, Argumentos, Propiedades: lowerCamelCase","title":"Convenciones de nombres"},{"location":"es/guia/01_cheatsheet/#tipos-de-commits","text":"Prefijos que utilizamos al realizar commits. add : C\u00f3digo Nuevo que se agrega al repo. change update : Cambio que se realiza en el codigo. fix , hotfix bugfix : Correcci\u00f3n que se realizo en el C\u00f3digo. docs : Cambio en la documentaci\u00f3n. (sin cambio de c\u00f3digo) refactor : Refactor en el C\u00f3digo deprecate : C\u00f3digo que esta destinado a desaparecer, pero que aun se usa. delete : C\u00f3digo que se elimino del repositorio. style : Cambios en el codigo que mejoran su lectura.","title":"Tipos de Commits"},{"location":"es/guia/01_cheatsheet/#scope-de-commits","text":"El Scope de los commits varia dependiendo de la arquitectura del proyecto, pero en l\u00edneas generales, el Scope es brindado por el nombre de los directorios que contienen los archivos modificados.","title":"Scope de Commits"},{"location":"es/guia/01_cheatsheet/#prefijos-de-branches","text":"","title":"Prefijos de Branches"},{"location":"es/guia/01_cheatsheet/#permanentes","text":"- master/ main/ - qa/ - test/ - production/ - development/ develop/","title":"Permanentes"},{"location":"es/guia/01_cheatsheet/#temporales","text":"- feature/ - bugfix/ - fix/ - hotfix/ - change/ - update/ - remove/ - merge/ - experimental/ - build/ - release/ - deprecate/ - security/ - performance/ - cicd/","title":"Temporales"},{"location":"es/guia/01_cheatsheet/#estimacion-de-tareas","text":"Para la estimacion de tareas nos basamos en la planning poker. El cual utiliza la sucesion de Fibonachi Estimacion Descripcion 0 Tarea trivial 1 Poco mas de medio d\u00eda 2 Poco mas de un d\u00eda 3 Casi dos d\u00edas 5 Poco mas de 3 d\u00edas 8 Una semana 13 Una semana y media 21 Dos semanas o mas","title":"Estimaci\u00f3n de Tareas"},{"location":"es/guia/01_cheatsheet/#keyboard-shortcuts-reference","text":"","title":"Keyboard Shortcuts Reference"},{"location":"es/guia/01_cheatsheet/#intellij-idea-android-studio","text":"MacOs Windows/Linux Flutter IDE cheat sheet MacOS Flutter IDE cheat sheet Windows & Linux","title":"IntelliJ IDEA / Android Studio"},{"location":"es/guia/01_cheatsheet/#visual-studio-code","text":"Windows MacOs Linux Flutter IDE cheat sheet Windows & Linux","title":"Visual Studio Code"},{"location":"es/guia/02_dart_basico/","text":"Dart B\u00e1sico \u00b6 Si ya saber programar y esta guia te ayudara a comprender mejor los conceptos basicos de dart. Versions - Dart 2.12 - Flutter 2.2 Enlaces de Interes : - Efective Dart : Buenas Practicas al usar Dart - Raywenderlich - Basic Dart Contenido : - Dart B\u00e1sico - Getting Started - Core Concepts - Variables, Comentarios y Tipos de datos - Comentarios - Docs Commets - Tipos de Datos (Data Types) - Tipos de datos B\u00e1sicos (Basic Data Types) - el tipo dynamic - Boleanos (Booleans) - Operadores (Operators) - Operadores Aritm\u00e9ticos - Operadores de Igualdad - Operadores de Comparaci\u00f3n - Operadores L\u00f3gicos - Textos (Strings) - Escapando Strings - Inmutabilidad - Nulidad (Nullability) Getting Started \u00b6 visit https://dart.dev/get-dart . Why Dart? Dart es parecido a Java , C# , Swift y Kotlin . Caracter\u00edsticas - De tipeado Fuerte - Con Inferencia de tipo de datos - Con String expressions - Multiparadigma, orientado a opjetos y funcional. - Con Null safety - Multiplataforma Android, IOS, Web, Desktop (Win, Linux, Mac) Core Concepts \u00b6 Los programas en dart comienzan con una funci\u00f3n llamada main como en C , Swift or Kotlin . void main () { print ( \"Hola Mundo\" ); } Como puedes ver el el return type es void, significando que la funci\u00f3n no retorna ning\u00fan valor. Dentro de la funci\u00f3n main se crea todo el c\u00f3digo que sera la app. en esta caso utilizamos la funcion print() nativa de dart para imprimir en pantalla el texto (string) \"Hola Mundo\" A continuaci\u00f3n veremos los siguientes conceptos Variables, comentarios y tipo de datos. Tipos B\u00e1sicos de Dart operadores Strings Inmutabilidad NUlidad Condiciones y Break For Loops Variables, Comentarios y Tipos de datos \u00b6 Ahora vamos a agregar una variable a nuestra funcion main y modificaremos la funci\u00f3n print para que muestre nuestra variable. [!IMPORTANT] Las sentencias en dart terminan con punto y coma (;) como en los lenguajes C o Java var myAge = 35 ; Nos quedaria algo como esto: void main () { var myAge = 42 ; print ( myAge ); } Comentarios \u00b6 Los comentarios en Dart son como en la mayor\u00eda de los lenguajes Los // representan una linea comentada y con /* ... */ podemos hacer bloques de texto comentado. Veamos un ejemplo: // Este es un comentario de una linea. print ( myAge ); // este tambien es un comentario de una linea /* Este es un comentario de multiples lineas. Son muy utiles para comentarios extensos */ Docs Commets \u00b6 End Dart existen un tercer tipo de comentarios que son los usados para la documentaci\u00f3n del c\u00f3digo generado, estos comentarios comienzan con /// Estos comentarios son muy \u00fatiles ya que nos permiten generar un documento en HTML con la documentaci\u00f3n, para esto utilizamos la librer\u00eda DartDoc Ejemplo: /// Este es un comentario para documentar el c\u00f3digo. Tipos de Datos (Data Types) \u00b6 Dart es un lenguaje de tipado fuerte (statically typed) esto quiere decir que al momento de compilar el c\u00f3digo Dart debe conocer el tipo de variable. El tipo de variable no puede cambiar cuando ejecuta el programa, como en C, Java, Swift, Kotlin, a diferencia de Python y Javascript, que son de tipado D\u00e9bil (dynamically typed) esto quiere decir que las variables pueden contener distinto tipo de datos cuando se ejecuta el programa. [!TIP] Para saber el tipo de dato que tiene una variable puedes posicionar el puntero del mouse sobre la misma. Dart puede inferir el tipo de dato de una variable cuando no se le asigna un tipo espesifico. Por ejemplo podemos declara la variable myAge con el tipo var y un valor de 42. Dart inferira el Data Type segun el valor asignado, en este caso sera un int var myAge = 42 Tipos de datos B\u00e1sicos (Basic Data Types) \u00b6 Dart utiliza los siguientes tipos de datos: int : numeros enteros. (42) double : numeros con decimales. (3.14) bool : bolleanos verdadero o falso (true o false) string : cadenas de texto (\"Sebastian\" + 'Larrauri') dynamic : Puede ser cualquiera de los tipos antes mencionados. (42/3.15/true/\"Sebastian\") [!TIP] int y double derivan the un tercer tipo llamdo num num utiliza a su vez el tipo dynamic num numbers = 5 ; el tipo dynamic \u00b6 Las variables de tipo dynamic simulan a un lenguaje de tipado debil. Agreguemos estas lineas: // Probamos las variables Dinamicas dynamic numberOfView ; numberOfView = 'No se han realizado Vistas' ; print ( numberOfView ); numberOfView = 1 ; print ( numberOfView ); Boleanos (Booleans) \u00b6 Los boleanos son tipos de datos que pueden ir cambiando su valor entre: true o false . // Boleanos bool areThereViews = false ; print ( areThereViews ); // probemos cambia rel valor areThereViews = true ; print ( areThereViews ); Operadores (Operators) \u00b6 Dart tiene los operadores usuales tales como : - Aritm\u00e9ticos - Igualdad - incremento decremento - comparaci\u00f3n - L\u00f3gicos [!NOTE] Operator overloading https://en.wikipedia.org/wiki/Operator_overloading Operadores Aritm\u00e9ticos \u00b6 print ( 40 + 2 ); // 42 print ( 44 - 2 ); // 42 print ( 21 * 2 ); // 42 print ( 84 / 2 ); // 42.0 Para la divisi\u00f3n Dart infiere que el resultado sera un double , por eso imprime 42.0 Ademas usa los operadores aritm\u00e9ticos/asignaci\u00f3n compuesto como por ejemplo: var value = 42.0 ; value += 1 ; print ( value ); // 43.0 value -= 1 ; print ( value ); // 42.0 value *= 2 ; print ( value ); // 84.0 value /= 2 ; print ( value ); // 42.0 Estos operadores realizan dos tareas por ejemplo += suma al valor de la derecha la cantidad de uno y luego asigna el resultado a la variable. un m\u00e9todo abreviado de hacer lo mismo es ++ value = 42 value ++ ; print ( value ); // 43.0 Finalmente tenemos el operador modulo % que nos permite obtener el valor restante de una divisi\u00f3n. print ( 392 % 50 ); // 42 Operadores de Igualdad \u00b6 Dart cuenta con operadores de igualdad y desigualdad print ( 42 == 43 ); // false print ( 42 != 43 ); // true Operadores de Comparaci\u00f3n \u00b6 Dart Utiliza los comparadores tipicos menor que mayor que menor e igual que mayor igual que print ( 42 < 43 ); // true print ( 42 >= 43 ); // false Operadores L\u00f3gicos \u00b6 Dart utiliza los operadores logicos clasicos como AND && y OR || print (( 41 < 42 ) && ( 42 < 43 )); // true print (( 41 < 42 ) || ( 42 > 43 )); // true El operador de negaci\u00f3n es el s\u00edmbolo de cierre de exclamaci\u00f3n ! y convierte lo verdadero en falso y lo falso en verdadero. print ( ! ( 41 < 42 )); // false [!NOTE] Para una lista completa de los operadores disponibles inm dart visita: https://dart.dev/guides/language/language-tour#operators Textos (Strings) \u00b6 Podemos ver los textos en dart ya que estan rodeados de comillas simples o dobles. var firstName = 'Albert' ; String lastName = \"Einstein\" ; Como en otros lenguajes puedes incrustrar el valor de una expresi\u00f3n en una cadena utilizando el s\u00edmbolo de dolar ${expresion] sila expresion es solo un identificador, se pueden omitir las llaves. var physicist = \" $ firstName $ lastName likes the number ${ 84 / 2 } \" ; print ( physicist ); // Albert Einstein /* $firstName and $lastName are replaced by the variable values. The returns the calculated result. */ Escapando Strings \u00b6 Escapar los textos nos sirve para mostrar los caracteres como ' o \" dentro de nuestros textos para hacerlos utilizamos \\ Por ejemplo si tenes una linea de texto que representamos con comillas dobles y dentro del texto utilizamos comillas dobles. var quote = \"Como dijo alguien alguna vez: \\\" la verdad es invisible a los ojos \\\" \" ; print ( quote ); // Como dijo alguien alguna vez: \"la verdad es invisible a los ojos\" Si se necesita mostrar los caracteres escapados se puede usar Raw Stings para hacerlo simplemente se agrega la letra r antes del string var rawString = r\"If you can't explain it simply\\nyou don't understand it well enough.\" ; print ( rawString ); // If you can't explain it simply\\nyou don't understand it well enough. En este ejemplo Dart trata a \\n como si fuera texto normal. Inmutabilidad \u00b6 Dart cuenta con las keywords const y final para valores que no cambian. usa const para variables que se conocen en tiempo de compilaci\u00f3n y usar final para variables que no se conoce el valor y que el mismo una vez asignado no cambiara. const pi = 3.14 ; print ( pi ); // 3.14 Dart infiere el type como double final indica que la variable es inmutable y que no puede ser reasignado con otro valor. Podemos usar tanto final como const para las variables que no cambian, aunque final es mejor para valores que se crean cuando se corre el programa y const para constantes que ya se conocen. final planet = 'Jupiter' ; // planet = 'Mars'; // error: planet can only be set once final String moon = 'Europa' ; print ( ' $ planet has a moon, $ moon ' ); // Jupiter has a moon, Europa Nulidad (Nullability) \u00b6 En el pasado Dart le daba a una varia sin valor el valor de null A partir de la version Dart 2.12, Dart se une a otros lenguajes como Swift o Kotlin para ser non-nullable por default Adicionalmente Dart garantiza que los tipos non-nullable nunca contengan un valor null , esto se conoces como sound null safety Normalmente cuando se declara una variablew la misma debe iniciarse: String middleName = 'May' ; print ( middleName ); // May No todos tienen un segundo nombre por lo que tiene sentido hacer la variable Nullable . Para hacer una variable Nullable simplemente agrega ? al final del tipo de variable: String ? middleName = null ; print ( middleName ); // null Por default el valor de una variable Nullable es null por lo que se puede simplificar la expresion a: String ? middleName ; print ( middleName ); // null Continue // TODO","title":"Dart B\u00e1sico"},{"location":"es/guia/02_dart_basico/#dart-basico","text":"Si ya saber programar y esta guia te ayudara a comprender mejor los conceptos basicos de dart. Versions - Dart 2.12 - Flutter 2.2 Enlaces de Interes : - Efective Dart : Buenas Practicas al usar Dart - Raywenderlich - Basic Dart Contenido : - Dart B\u00e1sico - Getting Started - Core Concepts - Variables, Comentarios y Tipos de datos - Comentarios - Docs Commets - Tipos de Datos (Data Types) - Tipos de datos B\u00e1sicos (Basic Data Types) - el tipo dynamic - Boleanos (Booleans) - Operadores (Operators) - Operadores Aritm\u00e9ticos - Operadores de Igualdad - Operadores de Comparaci\u00f3n - Operadores L\u00f3gicos - Textos (Strings) - Escapando Strings - Inmutabilidad - Nulidad (Nullability)","title":"Dart B\u00e1sico"},{"location":"es/guia/02_dart_basico/#getting-started","text":"visit https://dart.dev/get-dart . Why Dart? Dart es parecido a Java , C# , Swift y Kotlin . Caracter\u00edsticas - De tipeado Fuerte - Con Inferencia de tipo de datos - Con String expressions - Multiparadigma, orientado a opjetos y funcional. - Con Null safety - Multiplataforma Android, IOS, Web, Desktop (Win, Linux, Mac)","title":"Getting Started"},{"location":"es/guia/02_dart_basico/#core-concepts","text":"Los programas en dart comienzan con una funci\u00f3n llamada main como en C , Swift or Kotlin . void main () { print ( \"Hola Mundo\" ); } Como puedes ver el el return type es void, significando que la funci\u00f3n no retorna ning\u00fan valor. Dentro de la funci\u00f3n main se crea todo el c\u00f3digo que sera la app. en esta caso utilizamos la funcion print() nativa de dart para imprimir en pantalla el texto (string) \"Hola Mundo\" A continuaci\u00f3n veremos los siguientes conceptos Variables, comentarios y tipo de datos. Tipos B\u00e1sicos de Dart operadores Strings Inmutabilidad NUlidad Condiciones y Break For Loops","title":"Core Concepts"},{"location":"es/guia/02_dart_basico/#variables-comentarios-y-tipos-de-datos","text":"Ahora vamos a agregar una variable a nuestra funcion main y modificaremos la funci\u00f3n print para que muestre nuestra variable. [!IMPORTANT] Las sentencias en dart terminan con punto y coma (;) como en los lenguajes C o Java var myAge = 35 ; Nos quedaria algo como esto: void main () { var myAge = 42 ; print ( myAge ); }","title":"Variables, Comentarios y Tipos de datos"},{"location":"es/guia/02_dart_basico/#comentarios","text":"Los comentarios en Dart son como en la mayor\u00eda de los lenguajes Los // representan una linea comentada y con /* ... */ podemos hacer bloques de texto comentado. Veamos un ejemplo: // Este es un comentario de una linea. print ( myAge ); // este tambien es un comentario de una linea /* Este es un comentario de multiples lineas. Son muy utiles para comentarios extensos */","title":"Comentarios"},{"location":"es/guia/02_dart_basico/#docs-commets","text":"End Dart existen un tercer tipo de comentarios que son los usados para la documentaci\u00f3n del c\u00f3digo generado, estos comentarios comienzan con /// Estos comentarios son muy \u00fatiles ya que nos permiten generar un documento en HTML con la documentaci\u00f3n, para esto utilizamos la librer\u00eda DartDoc Ejemplo: /// Este es un comentario para documentar el c\u00f3digo.","title":"Docs Commets"},{"location":"es/guia/02_dart_basico/#tipos-de-datos-data-types","text":"Dart es un lenguaje de tipado fuerte (statically typed) esto quiere decir que al momento de compilar el c\u00f3digo Dart debe conocer el tipo de variable. El tipo de variable no puede cambiar cuando ejecuta el programa, como en C, Java, Swift, Kotlin, a diferencia de Python y Javascript, que son de tipado D\u00e9bil (dynamically typed) esto quiere decir que las variables pueden contener distinto tipo de datos cuando se ejecuta el programa. [!TIP] Para saber el tipo de dato que tiene una variable puedes posicionar el puntero del mouse sobre la misma. Dart puede inferir el tipo de dato de una variable cuando no se le asigna un tipo espesifico. Por ejemplo podemos declara la variable myAge con el tipo var y un valor de 42. Dart inferira el Data Type segun el valor asignado, en este caso sera un int var myAge = 42","title":"Tipos  de Datos (Data Types)"},{"location":"es/guia/02_dart_basico/#tipos-de-datos-basicos-basic-data-types","text":"Dart utiliza los siguientes tipos de datos: int : numeros enteros. (42) double : numeros con decimales. (3.14) bool : bolleanos verdadero o falso (true o false) string : cadenas de texto (\"Sebastian\" + 'Larrauri') dynamic : Puede ser cualquiera de los tipos antes mencionados. (42/3.15/true/\"Sebastian\") [!TIP] int y double derivan the un tercer tipo llamdo num num utiliza a su vez el tipo dynamic num numbers = 5 ;","title":"Tipos de datos B\u00e1sicos (Basic Data Types)"},{"location":"es/guia/02_dart_basico/#el-tipo-dynamic","text":"Las variables de tipo dynamic simulan a un lenguaje de tipado debil. Agreguemos estas lineas: // Probamos las variables Dinamicas dynamic numberOfView ; numberOfView = 'No se han realizado Vistas' ; print ( numberOfView ); numberOfView = 1 ; print ( numberOfView );","title":"el tipo dynamic"},{"location":"es/guia/02_dart_basico/#boleanos-booleans","text":"Los boleanos son tipos de datos que pueden ir cambiando su valor entre: true o false . // Boleanos bool areThereViews = false ; print ( areThereViews ); // probemos cambia rel valor areThereViews = true ; print ( areThereViews );","title":"Boleanos (Booleans)"},{"location":"es/guia/02_dart_basico/#operadores-operators","text":"Dart tiene los operadores usuales tales como : - Aritm\u00e9ticos - Igualdad - incremento decremento - comparaci\u00f3n - L\u00f3gicos [!NOTE] Operator overloading https://en.wikipedia.org/wiki/Operator_overloading","title":"Operadores (Operators)"},{"location":"es/guia/02_dart_basico/#operadores-aritmeticos","text":"print ( 40 + 2 ); // 42 print ( 44 - 2 ); // 42 print ( 21 * 2 ); // 42 print ( 84 / 2 ); // 42.0 Para la divisi\u00f3n Dart infiere que el resultado sera un double , por eso imprime 42.0 Ademas usa los operadores aritm\u00e9ticos/asignaci\u00f3n compuesto como por ejemplo: var value = 42.0 ; value += 1 ; print ( value ); // 43.0 value -= 1 ; print ( value ); // 42.0 value *= 2 ; print ( value ); // 84.0 value /= 2 ; print ( value ); // 42.0 Estos operadores realizan dos tareas por ejemplo += suma al valor de la derecha la cantidad de uno y luego asigna el resultado a la variable. un m\u00e9todo abreviado de hacer lo mismo es ++ value = 42 value ++ ; print ( value ); // 43.0 Finalmente tenemos el operador modulo % que nos permite obtener el valor restante de una divisi\u00f3n. print ( 392 % 50 ); // 42","title":"Operadores Aritm\u00e9ticos"},{"location":"es/guia/02_dart_basico/#operadores-de-igualdad","text":"Dart cuenta con operadores de igualdad y desigualdad print ( 42 == 43 ); // false print ( 42 != 43 ); // true","title":"Operadores de Igualdad"},{"location":"es/guia/02_dart_basico/#operadores-de-comparacion","text":"Dart Utiliza los comparadores tipicos menor que mayor que menor e igual que mayor igual que print ( 42 < 43 ); // true print ( 42 >= 43 ); // false","title":"Operadores de Comparaci\u00f3n"},{"location":"es/guia/02_dart_basico/#operadores-logicos","text":"Dart utiliza los operadores logicos clasicos como AND && y OR || print (( 41 < 42 ) && ( 42 < 43 )); // true print (( 41 < 42 ) || ( 42 > 43 )); // true El operador de negaci\u00f3n es el s\u00edmbolo de cierre de exclamaci\u00f3n ! y convierte lo verdadero en falso y lo falso en verdadero. print ( ! ( 41 < 42 )); // false [!NOTE] Para una lista completa de los operadores disponibles inm dart visita: https://dart.dev/guides/language/language-tour#operators","title":"Operadores L\u00f3gicos"},{"location":"es/guia/02_dart_basico/#textos-strings","text":"Podemos ver los textos en dart ya que estan rodeados de comillas simples o dobles. var firstName = 'Albert' ; String lastName = \"Einstein\" ; Como en otros lenguajes puedes incrustrar el valor de una expresi\u00f3n en una cadena utilizando el s\u00edmbolo de dolar ${expresion] sila expresion es solo un identificador, se pueden omitir las llaves. var physicist = \" $ firstName $ lastName likes the number ${ 84 / 2 } \" ; print ( physicist ); // Albert Einstein /* $firstName and $lastName are replaced by the variable values. The returns the calculated result. */","title":"Textos (Strings)"},{"location":"es/guia/02_dart_basico/#escapando-strings","text":"Escapar los textos nos sirve para mostrar los caracteres como ' o \" dentro de nuestros textos para hacerlos utilizamos \\ Por ejemplo si tenes una linea de texto que representamos con comillas dobles y dentro del texto utilizamos comillas dobles. var quote = \"Como dijo alguien alguna vez: \\\" la verdad es invisible a los ojos \\\" \" ; print ( quote ); // Como dijo alguien alguna vez: \"la verdad es invisible a los ojos\" Si se necesita mostrar los caracteres escapados se puede usar Raw Stings para hacerlo simplemente se agrega la letra r antes del string var rawString = r\"If you can't explain it simply\\nyou don't understand it well enough.\" ; print ( rawString ); // If you can't explain it simply\\nyou don't understand it well enough. En este ejemplo Dart trata a \\n como si fuera texto normal.","title":"Escapando Strings"},{"location":"es/guia/02_dart_basico/#inmutabilidad","text":"Dart cuenta con las keywords const y final para valores que no cambian. usa const para variables que se conocen en tiempo de compilaci\u00f3n y usar final para variables que no se conoce el valor y que el mismo una vez asignado no cambiara. const pi = 3.14 ; print ( pi ); // 3.14 Dart infiere el type como double final indica que la variable es inmutable y que no puede ser reasignado con otro valor. Podemos usar tanto final como const para las variables que no cambian, aunque final es mejor para valores que se crean cuando se corre el programa y const para constantes que ya se conocen. final planet = 'Jupiter' ; // planet = 'Mars'; // error: planet can only be set once final String moon = 'Europa' ; print ( ' $ planet has a moon, $ moon ' ); // Jupiter has a moon, Europa","title":"Inmutabilidad"},{"location":"es/guia/02_dart_basico/#nulidad-nullability","text":"En el pasado Dart le daba a una varia sin valor el valor de null A partir de la version Dart 2.12, Dart se une a otros lenguajes como Swift o Kotlin para ser non-nullable por default Adicionalmente Dart garantiza que los tipos non-nullable nunca contengan un valor null , esto se conoces como sound null safety Normalmente cuando se declara una variablew la misma debe iniciarse: String middleName = 'May' ; print ( middleName ); // May No todos tienen un segundo nombre por lo que tiene sentido hacer la variable Nullable . Para hacer una variable Nullable simplemente agrega ? al final del tipo de variable: String ? middleName = null ; print ( middleName ); // null Por default el valor de una variable Nullable es null por lo que se puede simplificar la expresion a: String ? middleName ; print ( middleName ); // null Continue // TODO","title":"Nulidad (Nullability)"},{"location":"es/guia/03_flutter_basico/","text":"Flutter B\u00e1sico \u00b6 Lo necesario para comprender como funciona Flutter. Esta basado en estos dos tutoriales: https://www.raywenderlich.com/24499516-getting-started-with-flutter https://dev.to/solutelabs/a-developer-s-guide-to-flutter-37f1","title":"Flutter B\u00e1sico"},{"location":"es/guia/03_flutter_basico/#flutter-basico","text":"Lo necesario para comprender como funciona Flutter. Esta basado en estos dos tutoriales: https://www.raywenderlich.com/24499516-getting-started-with-flutter https://dev.to/solutelabs/a-developer-s-guide-to-flutter-37f1","title":"Flutter B\u00e1sico"},{"location":"es/guia/04_guia_de_estilos/","text":"Gu\u00eda de Estilos Flutter/Dart \u00b6 En este documento veremos las convenciones en nombres, estilos, idioma para escribir nuestro c\u00f3digo Flutter / Dart. Idioma: \u00b6 Utilizaremos el idioma ingl\u00e9s, dado que es el idioma universal de la programaci\u00f3n y ciertos procesos de auditor\u00eda requieren este idioma. Convenciones Nombres \u00b6 Los nombres deber\u00e1n de cumplir el siguiente formato: Directorios y Carpetas : Min\u00fasculas separadas por gui\u00f3n bajo (snake_case) Archivos : Min\u00fasculas separadas por gui\u00f3n bajo (snake_case) Archivos Changelog and Readme : Todo en May\u00fasculas (UPPERCASE) Classes, enums, typedefs, extensions : Primera letra de cada palabra en May\u00fasculas (UpperCamelCase) Ejemplo: class MainScreen { ... } enum MainItem { .. } typedef Predicate < T > = bool Function ( T value ); extension MyList < T > on List < T > { ... } Variables, constants, parameters, and named parameters : Primera palabra en min\u00fasculas subsiguientes primera letra de cada palabra en May\u00fasculas (lowerCamelCase) var item ; const bookPrice = 3.14 ; final urlScheme = RegExp ( '^([a-z]+):' ); void sum ( int bookPrice ) { // ... } Libraries, packages, directories, and source files usar : lowercase_with_underscores. Ejemplos: library firebase_dynamic_links ; import 'socket/socket_manager.dart' ; Bloc Naming Conventions \u00b6 Eventos Los eventos deben nombrarse en tiempo pasado. Los eventos son cosas que ya han ocurrido desde la perspectiva del bloque. //SI CounterStarted CounterIncremented CounterDecremented CounterIncrementRetried //NO Initial CounterInitialized Increment DoIncrement IncrementCounter Estados Los estados deben ser sustantivos Un estado es solo una impresi\u00f3n en un momento determinado. El nombre de los estados deben terminar en algunas de las siguientes opciones. Initial | Success | Failure | InProgress //SI CounterInitial CounterLoadInProgress CounterLoadSuccess CounterLoadFailure //NO Initial Loading Success Succeeded Loaded Failure Failed Documentaci\u00f3n \u00b6 Para generar documentaci\u00f3n usamos dartdoc. Esto genera una p\u00e1gina web con la documentaci\u00f3n dentro del c\u00f3digo del proyecto. Para que dartdoc funcione, todos los comentarios que sean parte de la documentaci\u00f3n deben iniciar con /// Como comentar Clases: /// Clase para el manejo de todas las rutas del proyecto class Routes { } Las Clases se comentan arriba desde donde empieza a definirse. Los metodos Igual Los Widget se docuentan en la primer linea dentro del widget, para seguir un mismom paro comcumentamos por fuera y usamos template. Activar DartDocs Para activar dartdoc ejecutar en la terminal: pub global activate dartdoc // o esta otra opci\u00f3n: dart pub global activate dartdoc Generate Docs Para generar la documentaci\u00f3n ejecutar este comando: dartdoc Esto genera dentro del directorio . doc/api Para dar estilo a la documentaci\u00f3n se puede usar: Markdown Ver Documentaci\u00f3n Para visualizar la documentaci\u00f3n pub global activate dhttpd dhttpd -- path doc / api","title":"Gu\u00eda de Estilos"},{"location":"es/guia/04_guia_de_estilos/#guia-de-estilos-flutterdart","text":"En este documento veremos las convenciones en nombres, estilos, idioma para escribir nuestro c\u00f3digo Flutter / Dart.","title":"Gu\u00eda de Estilos Flutter/Dart"},{"location":"es/guia/04_guia_de_estilos/#idioma","text":"Utilizaremos el idioma ingl\u00e9s, dado que es el idioma universal de la programaci\u00f3n y ciertos procesos de auditor\u00eda requieren este idioma.","title":"Idioma:"},{"location":"es/guia/04_guia_de_estilos/#convenciones-nombres","text":"Los nombres deber\u00e1n de cumplir el siguiente formato: Directorios y Carpetas : Min\u00fasculas separadas por gui\u00f3n bajo (snake_case) Archivos : Min\u00fasculas separadas por gui\u00f3n bajo (snake_case) Archivos Changelog and Readme : Todo en May\u00fasculas (UPPERCASE) Classes, enums, typedefs, extensions : Primera letra de cada palabra en May\u00fasculas (UpperCamelCase) Ejemplo: class MainScreen { ... } enum MainItem { .. } typedef Predicate < T > = bool Function ( T value ); extension MyList < T > on List < T > { ... } Variables, constants, parameters, and named parameters : Primera palabra en min\u00fasculas subsiguientes primera letra de cada palabra en May\u00fasculas (lowerCamelCase) var item ; const bookPrice = 3.14 ; final urlScheme = RegExp ( '^([a-z]+):' ); void sum ( int bookPrice ) { // ... } Libraries, packages, directories, and source files usar : lowercase_with_underscores. Ejemplos: library firebase_dynamic_links ; import 'socket/socket_manager.dart' ;","title":"Convenciones Nombres"},{"location":"es/guia/04_guia_de_estilos/#bloc-naming-conventions","text":"Eventos Los eventos deben nombrarse en tiempo pasado. Los eventos son cosas que ya han ocurrido desde la perspectiva del bloque. //SI CounterStarted CounterIncremented CounterDecremented CounterIncrementRetried //NO Initial CounterInitialized Increment DoIncrement IncrementCounter Estados Los estados deben ser sustantivos Un estado es solo una impresi\u00f3n en un momento determinado. El nombre de los estados deben terminar en algunas de las siguientes opciones. Initial | Success | Failure | InProgress //SI CounterInitial CounterLoadInProgress CounterLoadSuccess CounterLoadFailure //NO Initial Loading Success Succeeded Loaded Failure Failed","title":"Bloc Naming Conventions"},{"location":"es/guia/04_guia_de_estilos/#documentacion","text":"Para generar documentaci\u00f3n usamos dartdoc. Esto genera una p\u00e1gina web con la documentaci\u00f3n dentro del c\u00f3digo del proyecto. Para que dartdoc funcione, todos los comentarios que sean parte de la documentaci\u00f3n deben iniciar con /// Como comentar Clases: /// Clase para el manejo de todas las rutas del proyecto class Routes { } Las Clases se comentan arriba desde donde empieza a definirse. Los metodos Igual Los Widget se docuentan en la primer linea dentro del widget, para seguir un mismom paro comcumentamos por fuera y usamos template. Activar DartDocs Para activar dartdoc ejecutar en la terminal: pub global activate dartdoc // o esta otra opci\u00f3n: dart pub global activate dartdoc Generate Docs Para generar la documentaci\u00f3n ejecutar este comando: dartdoc Esto genera dentro del directorio . doc/api Para dar estilo a la documentaci\u00f3n se puede usar: Markdown Ver Documentaci\u00f3n Para visualizar la documentaci\u00f3n pub global activate dhttpd dhttpd -- path doc / api","title":"Documentaci\u00f3n"},{"location":"es/guia/05_buenas_practicas/","text":"Buenas Practicas Flutter \u00b6 En este documento se detallan las buenas pr\u00e1cticas que el equipo de desarrollo debe implementar en la escritura de c\u00f3digo. Sin nada m\u00e1s que agregar, \u00a1A darle \u00c1tomos! Pubspec File \u00b6 // TODO readme File \u00b6 El proyecto debe contar con un archivo readme.md Changelog File \u00b6 El proyecto debe contar con un archivo changelog.md Control de Versiones \u00b6 Para el control de versiones utilizamos Git con metodolog\u00eda basada en Git-Flow y la nomenclatura a utilizar est\u00e1 basado en el Versionado Sem\u00e1ntico Nomenclatura : X.Y.Z+B Column1 Column2 Column3 X Mayor Suma 1 cuando se integra una branch que contenga un commit del tipo, BREAKING CHANG(!) Y Minor Suma 1 cuando se integra una branch del tipo: feature, new, add Z Patch Suma 1 cuando se integra otro tipo de branch. B Build Suma uno con cada nuevo build que se libera en producci\u00f3n, es el n\u00famero por el cual las Stores de Google y Apple, gestionan las apps. Imports \u00b6 Usar rutas relativas dentro del directorio: /lib import '../../../utils/dialog_utils.dart' ; import './utils/snackbar_utils.dart' ; // Para importar paquetes usar import import 'package:flutter/material.dart' ; Tipos de Variables \u00b6 Declaraciones de Variables Especificar el Type , evitar usar var //SI int item = 10 ; final Car bar = Car_ () _ ; String name = 'john' ; const int timeOut = 20 ; //NO var item = 10 ; final car = Car_ () _ ; const timeOut = 2000 ; Condicionales \u00b6 Usar if condition en vez de conditional expression muchas veces tenemos que renderizar un widget seg\u00fan la plataforma. Si la expresi\u00f3n condicional retorna null nunca se mostrar\u00e1 el widget. //SI Widget getText_ ( BuildContext context ) { _ return Row_ ( _ children: [ Text_ ( \"Hello\" ) _ , if ( Platform . isAndroid ) Text_ ( \"Android\" ) _ ] ); } //NO Widget getText_ ( BuildContext context ) { _ return Row_ ( _ children: [ Text_ ( \"Hello\" ) _ , Platform . isAndroid ? Text_ ( \"Android\" ) _ : null , Platform . isAndroid ? Text_ ( \"Android\" ) _ : SizeBox_ () _ , Platform . isAndroid ? Text_ ( \"Android\" ) _ : Container_ () _ , ] ); } AS / IS \u00b6 Evitar usar as usar** is //SI if ( item is Animal ) item . name = 'Lion' ; //NO ( item as Animal ). name = 'Lion' ; Spreed Collection \u00b6 Operador spreed collection Se usa para agregar una lista con valores a otra. //SI var y = [ 4 , 5 , 6 ]; var x = [ 1 , 2 ,... y ]; //NO var y = [ 4 , 5 , 6 ]; var x = [ 1 , 2 ]; x . addAll ( y ); Escapando Strings Largos \u00b6 raw string Opcional: Sirve para no tener que escapar caracteres. var s = r'This is demo string \\ and $' ; NULL Values \u00b6 Valores null En dart los valores null son iniciados autom\u00e1ticamente. //SI int _item ; //NO int _item = null ; Arrow Functions \u00b6 The => (arrow) Para funciones que contienen solo una expresi\u00f3n. //SI get width => right - left ; Widget getProgressBar_ () _ => CircularProgressIndicator_ ( _ valueColor: AlwaysStoppedAnimation_ < Color > ( Colors . blue ) _ , ); //NO get width { return right - left ; } Widget getProgressBar_ () { _ return CircularProgressIndicator_ ( _ valueColor: AlwaysStoppedAnimation_ < Color > ( Colors . blue ) _ , ); } Debuging \u00b6 Usar debugPrint() print() y debugPrint() se usa para imprimir en la consola Aveces al usar print() la salida es demasiado grande y Android descarta algunas lineas, para evitar esto usar: debugPrint () . Extract Method \u00b6 Separar widgets en widgets mas peque\u00f1os. Cuando se llama a setState() , todos los widgets descendientes se reconstruyen. Por lo tanto, Dividir el widget en widget mas peque\u00f1os hace que setState() llame a la parte de la UI que necesita cambiar. List Builder \u00b6 Use ListView.builder para listas largas Cuando trabaje con listas infinitas o listas muy grandes, Por lo general, es recomendable utilizar un constructor de ListView para mejorar el rendimiento. El constructor ListView predeterminado construye la lista completa a la vez. ListView.builder crea una lista diferida, cuando el usuario se desplaza hacia abajo en la lista, Scaffold ( appBar: CustomAppBar ( title: \"Verify Code\" ), // Sub Widget body: Container ( child: Column ( crossAxisAlignment: CrossAxisAlignment . start , children: < Widget > [ TimerView ( // Sub Widget key: _timerKey , resendClick: () {}) ], ), ), ) Arquitectura BLOC \u00b6 providers : Cambios que se apliquen dentro de esa capa. models : Cambios que apliquen dentro de ese directorio. repositories : Cambios que se apliquen dentro de ese directorio. modules : Cambios que se apliquen dentro de esta layer. designs : Cambios que se apliquen dentro de ese layer. core : Cambios que se hagan en el core de la aplicaci\u00f3n. tests : cambios que se hagan en los directorios test.","title":"Buenas Practicas"},{"location":"es/guia/05_buenas_practicas/#buenas-practicas-flutter","text":"En este documento se detallan las buenas pr\u00e1cticas que el equipo de desarrollo debe implementar en la escritura de c\u00f3digo. Sin nada m\u00e1s que agregar, \u00a1A darle \u00c1tomos!","title":"Buenas Practicas Flutter"},{"location":"es/guia/05_buenas_practicas/#pubspec-file","text":"// TODO","title":"Pubspec File"},{"location":"es/guia/05_buenas_practicas/#readme-file","text":"El proyecto debe contar con un archivo readme.md","title":"readme File"},{"location":"es/guia/05_buenas_practicas/#changelog-file","text":"El proyecto debe contar con un archivo changelog.md","title":"Changelog File"},{"location":"es/guia/05_buenas_practicas/#control-de-versiones","text":"Para el control de versiones utilizamos Git con metodolog\u00eda basada en Git-Flow y la nomenclatura a utilizar est\u00e1 basado en el Versionado Sem\u00e1ntico Nomenclatura : X.Y.Z+B Column1 Column2 Column3 X Mayor Suma 1 cuando se integra una branch que contenga un commit del tipo, BREAKING CHANG(!) Y Minor Suma 1 cuando se integra una branch del tipo: feature, new, add Z Patch Suma 1 cuando se integra otro tipo de branch. B Build Suma uno con cada nuevo build que se libera en producci\u00f3n, es el n\u00famero por el cual las Stores de Google y Apple, gestionan las apps.","title":"Control de Versiones"},{"location":"es/guia/05_buenas_practicas/#imports","text":"Usar rutas relativas dentro del directorio: /lib import '../../../utils/dialog_utils.dart' ; import './utils/snackbar_utils.dart' ; // Para importar paquetes usar import import 'package:flutter/material.dart' ;","title":"Imports"},{"location":"es/guia/05_buenas_practicas/#tipos-de-variables","text":"Declaraciones de Variables Especificar el Type , evitar usar var //SI int item = 10 ; final Car bar = Car_ () _ ; String name = 'john' ; const int timeOut = 20 ; //NO var item = 10 ; final car = Car_ () _ ; const timeOut = 2000 ;","title":"Tipos de Variables"},{"location":"es/guia/05_buenas_practicas/#condicionales","text":"Usar if condition en vez de conditional expression muchas veces tenemos que renderizar un widget seg\u00fan la plataforma. Si la expresi\u00f3n condicional retorna null nunca se mostrar\u00e1 el widget. //SI Widget getText_ ( BuildContext context ) { _ return Row_ ( _ children: [ Text_ ( \"Hello\" ) _ , if ( Platform . isAndroid ) Text_ ( \"Android\" ) _ ] ); } //NO Widget getText_ ( BuildContext context ) { _ return Row_ ( _ children: [ Text_ ( \"Hello\" ) _ , Platform . isAndroid ? Text_ ( \"Android\" ) _ : null , Platform . isAndroid ? Text_ ( \"Android\" ) _ : SizeBox_ () _ , Platform . isAndroid ? Text_ ( \"Android\" ) _ : Container_ () _ , ] ); }","title":"Condicionales"},{"location":"es/guia/05_buenas_practicas/#as-is","text":"Evitar usar as usar** is //SI if ( item is Animal ) item . name = 'Lion' ; //NO ( item as Animal ). name = 'Lion' ;","title":"AS / IS"},{"location":"es/guia/05_buenas_practicas/#spreed-collection","text":"Operador spreed collection Se usa para agregar una lista con valores a otra. //SI var y = [ 4 , 5 , 6 ]; var x = [ 1 , 2 ,... y ]; //NO var y = [ 4 , 5 , 6 ]; var x = [ 1 , 2 ]; x . addAll ( y );","title":"Spreed Collection"},{"location":"es/guia/05_buenas_practicas/#escapando-strings-largos","text":"raw string Opcional: Sirve para no tener que escapar caracteres. var s = r'This is demo string \\ and $' ;","title":"Escapando Strings Largos"},{"location":"es/guia/05_buenas_practicas/#null-values","text":"Valores null En dart los valores null son iniciados autom\u00e1ticamente. //SI int _item ; //NO int _item = null ;","title":"NULL Values"},{"location":"es/guia/05_buenas_practicas/#arrow-functions","text":"The => (arrow) Para funciones que contienen solo una expresi\u00f3n. //SI get width => right - left ; Widget getProgressBar_ () _ => CircularProgressIndicator_ ( _ valueColor: AlwaysStoppedAnimation_ < Color > ( Colors . blue ) _ , ); //NO get width { return right - left ; } Widget getProgressBar_ () { _ return CircularProgressIndicator_ ( _ valueColor: AlwaysStoppedAnimation_ < Color > ( Colors . blue ) _ , ); }","title":"Arrow Functions"},{"location":"es/guia/05_buenas_practicas/#debuging","text":"Usar debugPrint() print() y debugPrint() se usa para imprimir en la consola Aveces al usar print() la salida es demasiado grande y Android descarta algunas lineas, para evitar esto usar: debugPrint () .","title":"Debuging"},{"location":"es/guia/05_buenas_practicas/#extract-method","text":"Separar widgets en widgets mas peque\u00f1os. Cuando se llama a setState() , todos los widgets descendientes se reconstruyen. Por lo tanto, Dividir el widget en widget mas peque\u00f1os hace que setState() llame a la parte de la UI que necesita cambiar.","title":"Extract Method"},{"location":"es/guia/05_buenas_practicas/#list-builder","text":"Use ListView.builder para listas largas Cuando trabaje con listas infinitas o listas muy grandes, Por lo general, es recomendable utilizar un constructor de ListView para mejorar el rendimiento. El constructor ListView predeterminado construye la lista completa a la vez. ListView.builder crea una lista diferida, cuando el usuario se desplaza hacia abajo en la lista, Scaffold ( appBar: CustomAppBar ( title: \"Verify Code\" ), // Sub Widget body: Container ( child: Column ( crossAxisAlignment: CrossAxisAlignment . start , children: < Widget > [ TimerView ( // Sub Widget key: _timerKey , resendClick: () {}) ], ), ), )","title":"List Builder"},{"location":"es/guia/05_buenas_practicas/#arquitectura-bloc","text":"providers : Cambios que se apliquen dentro de esa capa. models : Cambios que apliquen dentro de ese directorio. repositories : Cambios que se apliquen dentro de ese directorio. modules : Cambios que se apliquen dentro de esta layer. designs : Cambios que se apliquen dentro de ese layer. core : Cambios que se hagan en el core de la aplicaci\u00f3n. tests : cambios que se hagan en los directorios test.","title":"Arquitectura BLOC"},{"location":"es/guia/06_git_git_flow/","text":"Git & Git Flow \u00b6 En este documento se explica la metodolog\u00eda Git y Git Flow a utilizar por el equipo de desarrollo Flutter. En la misma veremos el formato a utilizar para escribir los commits y crear branchs. Es importante mantener esta estructura ya que se utiliza para generar el versionado y changelog del proyecto. [!CAUTION] Recuerda siempre actualizar la branch develop y crear nuevas branches desde develop actualizado, para inciar tus desarrollos. Git & Git Flow Convenciones de estilo Branches Branch Permanentes Branch Temporales Commits Git Flow Convenciones de estilo \u00b6 Los nombres de directorios, ramas, etiquetas, commits deben cumplir con el siguiente formato: Idioma : Ingl\u00e9s. Largo del mensaje : hasta 80 caracteres. Branch folder : lowercase ej: feature/ Branch Name : kebab-case ej: feature/branch-name Tags : lowercase ej: v0.0.0 Commits : lowercase ej: docs(core): add new feature login [!IMPORTANT] los textos de commit y los nombres de las branchs deben ser legibles y descriptivos. Branches \u00b6 Veamos ahora c\u00f3mo nombraremos nuestras branchs. Tenemos dos tipos de branchs permanentes y temporales, estas \u00faltimas se borran al Mergearse con una branch permanente. Los nombres de las branches estar\u00e1n formados por una categor\u00eda o folder, seguida del nombre de la funcionalidad o tarea en la cual se est\u00e1 trabajando. Branch Permanentes \u00b6 Dentro de las branchs permanentes la categor\u00eda representa el estado dentro del flujo de desarrollo y estas son: Categor\u00edas Branchs Permanentes master o main : Dentro de esta rama se encuentra el c\u00f3digo que actualmente esta producci\u00f3n y es una rama protegida. Solo se puede integrar c\u00f3digo en esta rama que provenga de alguna subrama de qa, hotfix o develop, siendo esta ultima generalmente la m\u00e1s utilizada. qa o test : Rama que est\u00e1 siendo testeada por QA. Las diferentes versiones estar\u00e1n marcadas con un tag de formato \u201cv0.0.0\u201d demo : Rama con funcionalidades para demostraciones, los nombres de esta rama est\u00e1n formados por la versi\u00f3n o funcionalidad/tarea que se desea mostrar. . ej: demo/3.7.2 - demo/login Las subramas que no se est\u00e1n utilizando dentro de demo pueden borrarse, debiendo mantener siempre al menos una versi\u00f3n, generalmente la \u00faltima. develop o development : Es la rama principal del proyecto en desarrollo y es desde donde se crean las ramas temporales y las permanentes. Al mismo tiempo las ramas temporales se integran en esta rama. [!IMPORTANT] Al iniciar un nuevo proyecto en git se debe crear al menos la rama develop o development. Branch Temporales \u00b6 Estas branch deben crearse desde la branch develop, ya que es la branch que contiene el c\u00f3digo actualizado y que ya ha pasado por \u201cCode Review\u201d Dentro de las branchs temporales la categor\u00eda representa la acci\u00f3n que se est\u00e1 realizando dentro del proyecto y es usada para formar las categor\u00edas del archivo changelog.md El nombre de la branch debe estar formado por la tarea o funcionalidad en la cual se est\u00e1 trabajando. Categor\u00edas Branchs Temporales : feature, add, new/ : Rama para el desarrollo de nuevas funcionalidades y/o c\u00f3digo nuevo que se integre en el desarrollo. ej: add/list-of-users bugfix/ : Rama para solucionar Bugs. ej: bugfix/login-redirect-to-user-list fix/ : Rama para solucionar, errores en general. ej: fix/logout hotfix/ : Rama donde se solucionan problemas cr\u00edticos. Esta rama puede integrarse directamente en master o main por el l\u00edder t\u00e9cnico del equipo. ej: hotfix/sum-of-cost-by-month change/ : Rama para cambios en funcionalidades existentes. ej: change/list-of-users deprecate/ : Rama para indicar que una caracter\u00edstica o funcionalidad est\u00e1 obsoleta y que se eliminar\u00e1 en las pr\u00f3ximas versiones. ej: depracate/like-button security/ : Rama para solucionar vulnerabilidades de seguridad. ej: security/input-card-number remove/ : para remover c\u00f3digo que ya estaba en producci\u00f3n. ej: remove/like-button merge/ : Una Rama para resolver conflictos en el c\u00f3digo. Esta Rama no se Mergea en ninguna rama permanente y no es tenida en cuenta para la realizaci\u00f3n del changelog. ej: merge/conflict-list-of-users experimental/ : Rama para hacer pruebas y experimentos. Esta Rama no se integra en ninguna rama permanente y no es tenida en cuenta para la realizaci\u00f3n del changelog. ej: experimental/logo-animation build/ :Una Rama para crear y trackear Builds. Esta Rama no se integra en ninguna rama permanente y no es tenida en cuenta para la realizaci\u00f3n del changelog. Por lo general no se usa. ej: build/0.7.3 release/ :Rama para hacer un seguimiento de las Releases. Esta Rama no se integra en ninguna rama permanente y no es tenida en cuenta para la realizaci\u00f3n del changelog. Por lo general no se usa. ej: release/0.7.3 [!NOTE] Los nombres de las branch los pueden crear seg\u00fan los nombres de las tareas que se est\u00e1n realizando, agregando la categor\u00eda correspondiente. Por ejemplo: feature/singup [!IMPORTANT] Las ramas merge, experimental, build y release, no se integran en ninguna rama permanente, en el caso de merge o experimental, se deber\u00e1 crear otra rama utilizando la categor\u00eda y nombre acorde. Commits \u00b6 Los nombres de los commits est\u00e1n compuestos por un tipo, un scope y un texto descriptivo. El tipo representa \u00bfQue acci\u00f3n se realiz\u00f3 en el c\u00f3digo? El scope representa \u00bf D\u00f3nde se realizo en la estructura de carpetas? El texto explica \u00bfQue es lo que se hizo? ej: add(login/ui): update the text of login buttons NOTA: El texto debe ser descriptivo de lo que se hizo y legible. Tipos de Commits - add : C\u00f3digo Nuevo que se agrega al repo. - change update : Cambio que se realiza en el codigo. - fix , hotfix bugfix : Correcci\u00f3n que se realizo en el C\u00f3digo. - docs : Cambio en la documentaci\u00f3n. (sin cambio de c\u00f3digo) - refactor : Refactor en el C\u00f3digo - deprecate : C\u00f3digo que esta destinado a desaparecer, pero que aun se usa. - delete : C\u00f3digo que se elimino del repositorio. - style : Cambios en el codigo que mejoran su lectura. Scopes de Commits El scope est\u00e1 definido por la arquitectura que se utilice en el proyecto, siendo la principal BLOC, posteriormente se agregar\u00e1n otras arquitecturas. Atom Commits . Los commits deben contener pocos cambios, siendo lo usual, un commit por cambios en un archivo. En este video les voy a estar mostrando como realizar commits efectivos, f\u00e1ciles de gestionar y legibles por cualquier miembro del equipo, incluso aquellos sin conocimientos t\u00e9cnicos. Commits Efectivos: https://www.youtube.com/watch?v=js0MMkg4VkA Breaking Change Finalmente tenemos un tipo especial de commit que sirve para identificar cuando el c\u00f3digo que se agrega rompe la compatibilidad con versiones anteriores del proyecto. Por ejemplo puede ocurrir que un endpoint deje de existir y haya que cambiarlo, este cambio har\u00e1 que las versiones anteriores del desarrollo dejen de funcionar. Los commits que cumplan con esta condici\u00f3n son marcados como Breaking Change utilizando el texto BREAKING CHANGE, despu\u00e9s del texto del commit. Ejemplo Breaking Change: change(models): change multiple var types. BREAKING CHANGE Git Flow \u00b6 Git Flow representa el flujo de trabajo a realizar para integrar el c\u00f3digo generado en la rama de producci\u00f3n del proyecto. Git Flow: https://www.youtube.com/watch?v=4_tKNcBv6LM Resumen: En caso de que no exista se crea la branch develop o development Creamos la rama temporal en la cual vamos a trabajar siguiendo la nomenclatura antes mencionada por ejemplo agregamos una nueva feature add/reset-password Realizamos el trabajo y comiteamos seg\u00fan corresponda siguiendo la nomenclatura para los commits. Realizamos el Merge Request a Develop, asignando a la persona que realizar\u00e1 el Code Review. Realizamos el Code Review. Se acepta o rechaza el MR en caso de ser rechazado se explican los motivos. MR Aceptado Se integra en Develop. Se crea la Rama para qa. MR Rechazado Vuelve al autor para su correcci\u00f3n y repite el flujo desde el paso 3. QA Aceptado Se integra en Master y de ser necesario se crean las ramas para demostraciones. QA Rechazado Vuelve al autor para su correcci\u00f3n y repite el flujo desde el paso 3. Fin del Flujo Git-Flow","title":"Git & Git Flow"},{"location":"es/guia/06_git_git_flow/#git-git-flow","text":"En este documento se explica la metodolog\u00eda Git y Git Flow a utilizar por el equipo de desarrollo Flutter. En la misma veremos el formato a utilizar para escribir los commits y crear branchs. Es importante mantener esta estructura ya que se utiliza para generar el versionado y changelog del proyecto. [!CAUTION] Recuerda siempre actualizar la branch develop y crear nuevas branches desde develop actualizado, para inciar tus desarrollos. Git & Git Flow Convenciones de estilo Branches Branch Permanentes Branch Temporales Commits Git Flow","title":"Git &amp; Git Flow"},{"location":"es/guia/06_git_git_flow/#convenciones-de-estilo","text":"Los nombres de directorios, ramas, etiquetas, commits deben cumplir con el siguiente formato: Idioma : Ingl\u00e9s. Largo del mensaje : hasta 80 caracteres. Branch folder : lowercase ej: feature/ Branch Name : kebab-case ej: feature/branch-name Tags : lowercase ej: v0.0.0 Commits : lowercase ej: docs(core): add new feature login [!IMPORTANT] los textos de commit y los nombres de las branchs deben ser legibles y descriptivos.","title":"Convenciones de estilo"},{"location":"es/guia/06_git_git_flow/#branches","text":"Veamos ahora c\u00f3mo nombraremos nuestras branchs. Tenemos dos tipos de branchs permanentes y temporales, estas \u00faltimas se borran al Mergearse con una branch permanente. Los nombres de las branches estar\u00e1n formados por una categor\u00eda o folder, seguida del nombre de la funcionalidad o tarea en la cual se est\u00e1 trabajando.","title":"Branches"},{"location":"es/guia/06_git_git_flow/#branch-permanentes","text":"Dentro de las branchs permanentes la categor\u00eda representa el estado dentro del flujo de desarrollo y estas son: Categor\u00edas Branchs Permanentes master o main : Dentro de esta rama se encuentra el c\u00f3digo que actualmente esta producci\u00f3n y es una rama protegida. Solo se puede integrar c\u00f3digo en esta rama que provenga de alguna subrama de qa, hotfix o develop, siendo esta ultima generalmente la m\u00e1s utilizada. qa o test : Rama que est\u00e1 siendo testeada por QA. Las diferentes versiones estar\u00e1n marcadas con un tag de formato \u201cv0.0.0\u201d demo : Rama con funcionalidades para demostraciones, los nombres de esta rama est\u00e1n formados por la versi\u00f3n o funcionalidad/tarea que se desea mostrar. . ej: demo/3.7.2 - demo/login Las subramas que no se est\u00e1n utilizando dentro de demo pueden borrarse, debiendo mantener siempre al menos una versi\u00f3n, generalmente la \u00faltima. develop o development : Es la rama principal del proyecto en desarrollo y es desde donde se crean las ramas temporales y las permanentes. Al mismo tiempo las ramas temporales se integran en esta rama. [!IMPORTANT] Al iniciar un nuevo proyecto en git se debe crear al menos la rama develop o development.","title":"Branch Permanentes"},{"location":"es/guia/06_git_git_flow/#branch-temporales","text":"Estas branch deben crearse desde la branch develop, ya que es la branch que contiene el c\u00f3digo actualizado y que ya ha pasado por \u201cCode Review\u201d Dentro de las branchs temporales la categor\u00eda representa la acci\u00f3n que se est\u00e1 realizando dentro del proyecto y es usada para formar las categor\u00edas del archivo changelog.md El nombre de la branch debe estar formado por la tarea o funcionalidad en la cual se est\u00e1 trabajando. Categor\u00edas Branchs Temporales : feature, add, new/ : Rama para el desarrollo de nuevas funcionalidades y/o c\u00f3digo nuevo que se integre en el desarrollo. ej: add/list-of-users bugfix/ : Rama para solucionar Bugs. ej: bugfix/login-redirect-to-user-list fix/ : Rama para solucionar, errores en general. ej: fix/logout hotfix/ : Rama donde se solucionan problemas cr\u00edticos. Esta rama puede integrarse directamente en master o main por el l\u00edder t\u00e9cnico del equipo. ej: hotfix/sum-of-cost-by-month change/ : Rama para cambios en funcionalidades existentes. ej: change/list-of-users deprecate/ : Rama para indicar que una caracter\u00edstica o funcionalidad est\u00e1 obsoleta y que se eliminar\u00e1 en las pr\u00f3ximas versiones. ej: depracate/like-button security/ : Rama para solucionar vulnerabilidades de seguridad. ej: security/input-card-number remove/ : para remover c\u00f3digo que ya estaba en producci\u00f3n. ej: remove/like-button merge/ : Una Rama para resolver conflictos en el c\u00f3digo. Esta Rama no se Mergea en ninguna rama permanente y no es tenida en cuenta para la realizaci\u00f3n del changelog. ej: merge/conflict-list-of-users experimental/ : Rama para hacer pruebas y experimentos. Esta Rama no se integra en ninguna rama permanente y no es tenida en cuenta para la realizaci\u00f3n del changelog. ej: experimental/logo-animation build/ :Una Rama para crear y trackear Builds. Esta Rama no se integra en ninguna rama permanente y no es tenida en cuenta para la realizaci\u00f3n del changelog. Por lo general no se usa. ej: build/0.7.3 release/ :Rama para hacer un seguimiento de las Releases. Esta Rama no se integra en ninguna rama permanente y no es tenida en cuenta para la realizaci\u00f3n del changelog. Por lo general no se usa. ej: release/0.7.3 [!NOTE] Los nombres de las branch los pueden crear seg\u00fan los nombres de las tareas que se est\u00e1n realizando, agregando la categor\u00eda correspondiente. Por ejemplo: feature/singup [!IMPORTANT] Las ramas merge, experimental, build y release, no se integran en ninguna rama permanente, en el caso de merge o experimental, se deber\u00e1 crear otra rama utilizando la categor\u00eda y nombre acorde.","title":"Branch Temporales"},{"location":"es/guia/06_git_git_flow/#commits","text":"Los nombres de los commits est\u00e1n compuestos por un tipo, un scope y un texto descriptivo. El tipo representa \u00bfQue acci\u00f3n se realiz\u00f3 en el c\u00f3digo? El scope representa \u00bf D\u00f3nde se realizo en la estructura de carpetas? El texto explica \u00bfQue es lo que se hizo? ej: add(login/ui): update the text of login buttons NOTA: El texto debe ser descriptivo de lo que se hizo y legible. Tipos de Commits - add : C\u00f3digo Nuevo que se agrega al repo. - change update : Cambio que se realiza en el codigo. - fix , hotfix bugfix : Correcci\u00f3n que se realizo en el C\u00f3digo. - docs : Cambio en la documentaci\u00f3n. (sin cambio de c\u00f3digo) - refactor : Refactor en el C\u00f3digo - deprecate : C\u00f3digo que esta destinado a desaparecer, pero que aun se usa. - delete : C\u00f3digo que se elimino del repositorio. - style : Cambios en el codigo que mejoran su lectura. Scopes de Commits El scope est\u00e1 definido por la arquitectura que se utilice en el proyecto, siendo la principal BLOC, posteriormente se agregar\u00e1n otras arquitecturas. Atom Commits . Los commits deben contener pocos cambios, siendo lo usual, un commit por cambios en un archivo. En este video les voy a estar mostrando como realizar commits efectivos, f\u00e1ciles de gestionar y legibles por cualquier miembro del equipo, incluso aquellos sin conocimientos t\u00e9cnicos. Commits Efectivos: https://www.youtube.com/watch?v=js0MMkg4VkA Breaking Change Finalmente tenemos un tipo especial de commit que sirve para identificar cuando el c\u00f3digo que se agrega rompe la compatibilidad con versiones anteriores del proyecto. Por ejemplo puede ocurrir que un endpoint deje de existir y haya que cambiarlo, este cambio har\u00e1 que las versiones anteriores del desarrollo dejen de funcionar. Los commits que cumplan con esta condici\u00f3n son marcados como Breaking Change utilizando el texto BREAKING CHANGE, despu\u00e9s del texto del commit. Ejemplo Breaking Change: change(models): change multiple var types. BREAKING CHANGE","title":"Commits"},{"location":"es/guia/06_git_git_flow/#git-flow","text":"Git Flow representa el flujo de trabajo a realizar para integrar el c\u00f3digo generado en la rama de producci\u00f3n del proyecto. Git Flow: https://www.youtube.com/watch?v=4_tKNcBv6LM Resumen: En caso de que no exista se crea la branch develop o development Creamos la rama temporal en la cual vamos a trabajar siguiendo la nomenclatura antes mencionada por ejemplo agregamos una nueva feature add/reset-password Realizamos el trabajo y comiteamos seg\u00fan corresponda siguiendo la nomenclatura para los commits. Realizamos el Merge Request a Develop, asignando a la persona que realizar\u00e1 el Code Review. Realizamos el Code Review. Se acepta o rechaza el MR en caso de ser rechazado se explican los motivos. MR Aceptado Se integra en Develop. Se crea la Rama para qa. MR Rechazado Vuelve al autor para su correcci\u00f3n y repite el flujo desde el paso 3. QA Aceptado Se integra en Master y de ser necesario se crean las ramas para demostraciones. QA Rechazado Vuelve al autor para su correcci\u00f3n y repite el flujo desde el paso 3. Fin del Flujo Git-Flow","title":"Git Flow"},{"location":"es/guia/07_ci_cd/","text":"CI/CD \u00b6 Continues Integration / Continues Delivery","title":"Continues Integration / Continues Delivery"},{"location":"es/guia/07_ci_cd/#cicd","text":"Continues Integration / Continues Delivery","title":"CI/CD"},{"location":"es/guia/08_archivo_readme/","text":"El Archivo Readme \u00b6 En este documentos vamos a estar viendo las pautas y estructura para crear el archivo readme.md de los proyectos Flutter. Intentaremos responder a las siguientes preguntas: El Archivo Readme 1. \u00bfPara que sirve? 2. \u00bfQu\u00e9 contiene? 3. \u00bfCu\u00e1l es su Estructura? 4. Ejemplo de Archivo readme.md [!NOTE] 1: Para escribir el archivo readme.md utilizamos la nomenclatura de MarkDown [!NOTE] 2: el nombre del archivo debe escribirse con may\u00fasculas ej: README.md [!NOTE] 3: Algunas de las secciones pueden referir a documentaci\u00f3n ya realizada, en tal caso, se coloca el enlace correspondiente. [!NOTE] 4: lo recomendable es que el largo de cada regl\u00f3n escrito no supere los 80 caracteres. [!NOTE] 5: Escribimos los textos en espa\u00f1ol, por ahora. Sin embargo t\u00e9rminos de uso com\u00fan pueden estar en ingles. 1. \u00bfPara que sirve? \u00b6 El objetivo del archivo readme es el de facilitar a los desarrolladores la documentaci\u00f3n necesaria para utilizar y contribuir al desarrollo que se esta realizando. 2. \u00bfQu\u00e9 contiene? \u00b6 Para tal fin, el archivo readme debe contener respuestas a las siguientes preguntas: \u00bfC\u00f3mo Instalo el Proyecto? \u00bfC\u00f3mo ejecuto el Proyecto? \u00bfC\u00f3mo Contribuyo al Proyecto? \u00bfCu\u00e1l es la Estructura y Arquitectura del Proyecto? \u00bfQu\u00e9 patrones de desarrollo utiliza? \u00bfHay ejemplos de uso? \u00bfD\u00f3nde puedo usar la aplicaci\u00f3n? \u00bfC\u00f3mo generamos la documentaci\u00f3n t\u00e9cnica del proyecto. \u00bfQu\u00e9 tipo de licencia tiene? \u00bfTiene dependencias externas? 3. \u00bfCu\u00e1l es su Estructura? \u00b6 Si bien hay diferentes estructuras que podemos utilizar en Pickers hemos optado por la siguiente: Nombre del proyecto: Generalmente el nombre de la aplicaci\u00f3n Descripci\u00f3n: Una descripci\u00f3n del proyecto que nos informe por que se realizo, que problemas resuelve, e informaci\u00f3n de alto nivel sobre el proyecto. Frameworks Versions. Store Links. Geting Started: En esta secci\u00f3n detallamos lo b\u00e1sico para instalar, ejecutar y contribuir al proyecto. Instalaci\u00f3n: En esta secci\u00f3n definimos como configurar el entorno de desarrollo necesario para ejecutar el proyecto. Ejecuci\u00f3n: Descripci\u00f3n de los pasos y configuraciones necesarias para ejecutar el proyecto en los diferentes ambientes disponibles. Contribuci\u00f3n: Descripci\u00f3n de los procesos de contribuci\u00f3n, por lo general GIT, GIT COMMITS, GIT FLOW, Gu\u00eda de estilos y buenas practicas. In Deep: En esta secci\u00f3n describimos mas a fondo aspectos claves del proyectos: Estructura de la Aplicaci\u00f3n Arquitectura de la Aplicaci\u00f3n Manejadores de estado Patrones de Dise\u00f1o Proceso CI/CD Generar el Build Documentaci\u00f3n Datos de Color: En esta secci\u00f3n agregamos datos curiosos sobre el desarrollo, como por ejemplo cantidad de commits y MR realizados, cantidad de l\u00edneas de c\u00f3digo escritas, si alguno de los devs se ti\u00f1o el pelo, Eureka Momments y cosas por el estilo. Para contar utilizamos Cloc: En los albores de la programaci\u00f3n contar las l\u00edneas de c\u00f3digo que escrib\u00eda un desarrollador era la forma de medir su productividad. Claramente no fue la mejor, pero me parece divertida hoy en d\u00eda. 4. Ejemplo de Archivo readme.md \u00b6 Finalmente vamos a ver un ejemplo de un archivo readme con la estructura detallada anteriormente, el s\u00edmbolo de dollar $ simboliza la entrada de un comando por consola. # Ejemplo de README Este es un ejemplo de readme utilizando lo descripto anteriormente. El prososito del mismo es servir de ejemplo y tambien como template a la hora de escribir estos archivos, esta seccion es la descripcion. ## Getting Started ### Prerequisitos Para instalar y ejecutar correctamente este repositiorio es necesario que cuentes con un IDE (Android Studios / VSCode / IntelliJ) Flutter y Dart Instalados y configurados en la version: - Flutter: v2.8 - Dart: v2.15 Puedes probar la app en: IOS: Android: Web: Windows: Linux: Mac: ### Instalacion 1. Clona este repo. `$ git clone REPO_URL` 2. Run `$ flutter pub get` en el directorio principal de tu proyecto. 3. Run `$ flutter pub get` en el directorio de los paquetes externos. ### Ejecucion Contamos con diferentes ambientes para ejecutar nuestro proyecto. Para ejecutar el proyecto en cada ambiente utiliza los siguientes comands de consola. **IOS** - **QA** : `$ flutter run --dart-define=environment=qa ` - **DEV** : `$ flutter run --dart-define=environment=dev ` - **PROD** : `$ flutter run --dart-define=environment=prod ` **ANDORID** - QA : `$ flutter run --flavor prod ` - DEV : `$ flutter run --flavor dev ` - Prod : `$ flutter run --flavor prod ` **WEB** - QA : `$ flutter run --flavor prod ` - DEV : `$ flutter run --flavor dev ` - Prod : `$ flutter run --flavor prod ` **WEB** - QA : `$ flutter run -d chrome --flavor prod ` - DEV : `$ flutter run -d chrome --flavor dev ` - Prod : `$ flutter run -d chrome --flavor prod ` **DESKTOP Windows** - QA : `$ flutter run -d windows --flavor prod ` - DEV : `$ flutter run -d windows --flavor dev ` - Prod : `$ flutter run -d windows --flavor prod ` ### Contribucion Antes de comenzar a contribuir, te recomendamos te familizarices con: 1. [ Nuestro Branch Model ]( https://www.example.com ) 2. [ Guia de Estilos Flutter ]( https://www.example.com ) 3. [ Buenas Practicas Flutter ]( https://www.example.com ) ### In Deep 1. Estructura de la Aplicaci\u00f3n 2. Arquitectura de la Aplicaci\u00f3n 3. Manejadores de estado 4. Patrones de Dise\u00f1o 5. Proceso CI/CD 6. Generar el Build 7. Documentaci\u00f3n ### Fun Facts","title":"El Archivo Readme"},{"location":"es/guia/08_archivo_readme/#el-archivo-readme","text":"En este documentos vamos a estar viendo las pautas y estructura para crear el archivo readme.md de los proyectos Flutter. Intentaremos responder a las siguientes preguntas: El Archivo Readme 1. \u00bfPara que sirve? 2. \u00bfQu\u00e9 contiene? 3. \u00bfCu\u00e1l es su Estructura? 4. Ejemplo de Archivo readme.md [!NOTE] 1: Para escribir el archivo readme.md utilizamos la nomenclatura de MarkDown [!NOTE] 2: el nombre del archivo debe escribirse con may\u00fasculas ej: README.md [!NOTE] 3: Algunas de las secciones pueden referir a documentaci\u00f3n ya realizada, en tal caso, se coloca el enlace correspondiente. [!NOTE] 4: lo recomendable es que el largo de cada regl\u00f3n escrito no supere los 80 caracteres. [!NOTE] 5: Escribimos los textos en espa\u00f1ol, por ahora. Sin embargo t\u00e9rminos de uso com\u00fan pueden estar en ingles.","title":"El Archivo Readme"},{"location":"es/guia/08_archivo_readme/#1-para-que-sirve","text":"El objetivo del archivo readme es el de facilitar a los desarrolladores la documentaci\u00f3n necesaria para utilizar y contribuir al desarrollo que se esta realizando.","title":"1. \u00bfPara que sirve?"},{"location":"es/guia/08_archivo_readme/#2-que-contiene","text":"Para tal fin, el archivo readme debe contener respuestas a las siguientes preguntas: \u00bfC\u00f3mo Instalo el Proyecto? \u00bfC\u00f3mo ejecuto el Proyecto? \u00bfC\u00f3mo Contribuyo al Proyecto? \u00bfCu\u00e1l es la Estructura y Arquitectura del Proyecto? \u00bfQu\u00e9 patrones de desarrollo utiliza? \u00bfHay ejemplos de uso? \u00bfD\u00f3nde puedo usar la aplicaci\u00f3n? \u00bfC\u00f3mo generamos la documentaci\u00f3n t\u00e9cnica del proyecto. \u00bfQu\u00e9 tipo de licencia tiene? \u00bfTiene dependencias externas?","title":"2. \u00bfQu\u00e9 contiene?"},{"location":"es/guia/08_archivo_readme/#3-cual-es-su-estructura","text":"Si bien hay diferentes estructuras que podemos utilizar en Pickers hemos optado por la siguiente: Nombre del proyecto: Generalmente el nombre de la aplicaci\u00f3n Descripci\u00f3n: Una descripci\u00f3n del proyecto que nos informe por que se realizo, que problemas resuelve, e informaci\u00f3n de alto nivel sobre el proyecto. Frameworks Versions. Store Links. Geting Started: En esta secci\u00f3n detallamos lo b\u00e1sico para instalar, ejecutar y contribuir al proyecto. Instalaci\u00f3n: En esta secci\u00f3n definimos como configurar el entorno de desarrollo necesario para ejecutar el proyecto. Ejecuci\u00f3n: Descripci\u00f3n de los pasos y configuraciones necesarias para ejecutar el proyecto en los diferentes ambientes disponibles. Contribuci\u00f3n: Descripci\u00f3n de los procesos de contribuci\u00f3n, por lo general GIT, GIT COMMITS, GIT FLOW, Gu\u00eda de estilos y buenas practicas. In Deep: En esta secci\u00f3n describimos mas a fondo aspectos claves del proyectos: Estructura de la Aplicaci\u00f3n Arquitectura de la Aplicaci\u00f3n Manejadores de estado Patrones de Dise\u00f1o Proceso CI/CD Generar el Build Documentaci\u00f3n Datos de Color: En esta secci\u00f3n agregamos datos curiosos sobre el desarrollo, como por ejemplo cantidad de commits y MR realizados, cantidad de l\u00edneas de c\u00f3digo escritas, si alguno de los devs se ti\u00f1o el pelo, Eureka Momments y cosas por el estilo. Para contar utilizamos Cloc: En los albores de la programaci\u00f3n contar las l\u00edneas de c\u00f3digo que escrib\u00eda un desarrollador era la forma de medir su productividad. Claramente no fue la mejor, pero me parece divertida hoy en d\u00eda.","title":"3. \u00bfCu\u00e1l es su Estructura?"},{"location":"es/guia/08_archivo_readme/#4-ejemplo-de-archivo-readmemd","text":"Finalmente vamos a ver un ejemplo de un archivo readme con la estructura detallada anteriormente, el s\u00edmbolo de dollar $ simboliza la entrada de un comando por consola. # Ejemplo de README Este es un ejemplo de readme utilizando lo descripto anteriormente. El prososito del mismo es servir de ejemplo y tambien como template a la hora de escribir estos archivos, esta seccion es la descripcion. ## Getting Started ### Prerequisitos Para instalar y ejecutar correctamente este repositiorio es necesario que cuentes con un IDE (Android Studios / VSCode / IntelliJ) Flutter y Dart Instalados y configurados en la version: - Flutter: v2.8 - Dart: v2.15 Puedes probar la app en: IOS: Android: Web: Windows: Linux: Mac: ### Instalacion 1. Clona este repo. `$ git clone REPO_URL` 2. Run `$ flutter pub get` en el directorio principal de tu proyecto. 3. Run `$ flutter pub get` en el directorio de los paquetes externos. ### Ejecucion Contamos con diferentes ambientes para ejecutar nuestro proyecto. Para ejecutar el proyecto en cada ambiente utiliza los siguientes comands de consola. **IOS** - **QA** : `$ flutter run --dart-define=environment=qa ` - **DEV** : `$ flutter run --dart-define=environment=dev ` - **PROD** : `$ flutter run --dart-define=environment=prod ` **ANDORID** - QA : `$ flutter run --flavor prod ` - DEV : `$ flutter run --flavor dev ` - Prod : `$ flutter run --flavor prod ` **WEB** - QA : `$ flutter run --flavor prod ` - DEV : `$ flutter run --flavor dev ` - Prod : `$ flutter run --flavor prod ` **WEB** - QA : `$ flutter run -d chrome --flavor prod ` - DEV : `$ flutter run -d chrome --flavor dev ` - Prod : `$ flutter run -d chrome --flavor prod ` **DESKTOP Windows** - QA : `$ flutter run -d windows --flavor prod ` - DEV : `$ flutter run -d windows --flavor dev ` - Prod : `$ flutter run -d windows --flavor prod ` ### Contribucion Antes de comenzar a contribuir, te recomendamos te familizarices con: 1. [ Nuestro Branch Model ]( https://www.example.com ) 2. [ Guia de Estilos Flutter ]( https://www.example.com ) 3. [ Buenas Practicas Flutter ]( https://www.example.com ) ### In Deep 1. Estructura de la Aplicaci\u00f3n 2. Arquitectura de la Aplicaci\u00f3n 3. Manejadores de estado 4. Patrones de Dise\u00f1o 5. Proceso CI/CD 6. Generar el Build 7. Documentaci\u00f3n ### Fun Facts","title":"4. Ejemplo de Archivo readme.md"},{"location":"es/guia/09_archivo_changelog/","text":"El Archivo Changelog \u00b6 En esta secci\u00f3n vamos a estar viendo para que sirve el archivo changelog, como crearlo, actualizarlo y como nos ayuda en nuestro desarrollo y detenci\u00f3n de bugs. El Archivo Changelog \u00bfPara que sirve el changelog? El Formato del Changelog Escructura Ejemplo CHANGELOG.md: \u00bfPara que sirve el changelog? \u00b6 La principal funcionalidad del Changelog es llevar un control de los cambios que se realizaron al proyecto. Esto nos ayuda a tener un control sobre lo que hemos realizado e integrado en el proyecto. El changelog se construir\u00e1 utilizando los Merge Request que se integren al proyecto y se actualizara cada vez que se haga un nuevo build productivo o de test. El Formato del Changelog \u00b6 Cada nueva actualizaci\u00f3n al changelog debe contener el numero de version de la app, la fecha en que se realizo y el listado de branch mergeadas al proyecto. Escructura \u00b6 Cada rama creada contiene una categor\u00eda que se relaciona con una secci\u00f3n del changelog, seg\u00fan la siguiente estructura: Added : Para funcionalidades nuevas. Esta secci\u00f3n contendr\u00e1 el listado de los nombres de la Rama feature, add, new. Changed : Para los cambios en las funcionalidades existentes. Esta secci\u00f3n contendr\u00e1 el listado de los nombres de la Rama change, refactor. Fixed : Para correcci\u00f3n de errores. Esta secci\u00f3n contendr\u00e1 el listado de los nombres de la Ramas bugfix, fix, hotfix. Removed : Para las caracter\u00edsticas en desuso que se eliminaron en esta versi\u00f3n. Esta secci\u00f3n contendr\u00e1 el listado de los nombres de la Rama remove. Security : En caso de vulnerabilidades. Esta secci\u00f3n contendr\u00e1 el listado de los nombres de la Rama security. Deprecated : Para indicar que una caracter\u00edstica o funcionalidad est\u00e1 obsoleta y que se eliminar\u00e1 en las pr\u00f3ximas versiones. Esta secci\u00f3n contendr\u00e1 el listado de los nombres de la Rama deprecated. Ejemplo CHANGELOG.md: \u00b6 # ChangeLog ## v0.29.0+0 - 06/12/2021 - add/upload-images ## v0.28.0+0 - 29/11/2021 - add/back-arrow-ar - fix/auth-login-message' into ## v0.27.0+0 - 25/11/2021 - add/consumir-servicios-stepper","title":"El Archivo Changelog"},{"location":"es/guia/09_archivo_changelog/#el-archivo-changelog","text":"En esta secci\u00f3n vamos a estar viendo para que sirve el archivo changelog, como crearlo, actualizarlo y como nos ayuda en nuestro desarrollo y detenci\u00f3n de bugs. El Archivo Changelog \u00bfPara que sirve el changelog? El Formato del Changelog Escructura Ejemplo CHANGELOG.md:","title":"El Archivo Changelog"},{"location":"es/guia/09_archivo_changelog/#para-que-sirve-el-changelog","text":"La principal funcionalidad del Changelog es llevar un control de los cambios que se realizaron al proyecto. Esto nos ayuda a tener un control sobre lo que hemos realizado e integrado en el proyecto. El changelog se construir\u00e1 utilizando los Merge Request que se integren al proyecto y se actualizara cada vez que se haga un nuevo build productivo o de test.","title":"\u00bfPara que sirve el changelog?"},{"location":"es/guia/09_archivo_changelog/#el-formato-del-changelog","text":"Cada nueva actualizaci\u00f3n al changelog debe contener el numero de version de la app, la fecha en que se realizo y el listado de branch mergeadas al proyecto.","title":"El Formato del Changelog"},{"location":"es/guia/09_archivo_changelog/#escructura","text":"Cada rama creada contiene una categor\u00eda que se relaciona con una secci\u00f3n del changelog, seg\u00fan la siguiente estructura: Added : Para funcionalidades nuevas. Esta secci\u00f3n contendr\u00e1 el listado de los nombres de la Rama feature, add, new. Changed : Para los cambios en las funcionalidades existentes. Esta secci\u00f3n contendr\u00e1 el listado de los nombres de la Rama change, refactor. Fixed : Para correcci\u00f3n de errores. Esta secci\u00f3n contendr\u00e1 el listado de los nombres de la Ramas bugfix, fix, hotfix. Removed : Para las caracter\u00edsticas en desuso que se eliminaron en esta versi\u00f3n. Esta secci\u00f3n contendr\u00e1 el listado de los nombres de la Rama remove. Security : En caso de vulnerabilidades. Esta secci\u00f3n contendr\u00e1 el listado de los nombres de la Rama security. Deprecated : Para indicar que una caracter\u00edstica o funcionalidad est\u00e1 obsoleta y que se eliminar\u00e1 en las pr\u00f3ximas versiones. Esta secci\u00f3n contendr\u00e1 el listado de los nombres de la Rama deprecated.","title":"Escructura"},{"location":"es/guia/09_archivo_changelog/#ejemplo-changelogmd","text":"# ChangeLog ## v0.29.0+0 - 06/12/2021 - add/upload-images ## v0.28.0+0 - 29/11/2021 - add/back-arrow-ar - fix/auth-login-message' into ## v0.27.0+0 - 25/11/2021 - add/consumir-servicios-stepper","title":"Ejemplo CHANGELOG.md:"},{"location":"es/guia/10_archivo_widgettree/","text":"El Widget Tree \u00b6 Este es un archivo muy util que podemos realizar antes de comenzar nuestro desarrollo y nos brindara una vision mas clara del proyecto sus necesidades y desafios.","title":"El Widget Tree"},{"location":"es/guia/10_archivo_widgettree/#el-widget-tree","text":"Este es un archivo muy util que podemos realizar antes de comenzar nuestro desarrollo y nos brindara una vision mas clara del proyecto sus necesidades y desafios.","title":"El Widget Tree"},{"location":"es/guia/11_materiales_stores/","text":"Materiales para las Stores y algo mas. \u00b6 Aqui encontraras una recopilacion de las cosas que necesitas antes de deployar el desarrollo en las stores. Materiales para las Stores y algo mas. Cuentas y Credenciales Para Iniciar el Desarrollo Stores Information Google Play Apple Store Cuentas y Credenciales \u00b6 Credenciales de acceso a cuenta de Firebase, para integrar Analytics y Crashlytics y Notificacionies Push: En el caso que sea necesario ser necesario. Credenciales de acceso a cuenta de Google Cloud, para generar las api key necesarias para integrar los servicios de google. En el caso que sea necesario ser necesario . Agregar cuenta de los Devs a las cuentas de Apple Store y Google Play con los permisos necesarios, para poder generar los certificados y hacer la publicaci\u00f3n en las stores correspondientes. En el caso que sea necesario ser necesario. Para Iniciar el Desarrollo \u00b6 Nombre del Paquete : (no se puede cambiar una vez que se publica en la tienda) Este nombre es un identificador \u00fanico. Generalmente esta conformado por el dominio de la aplicaci\u00f3n invertido, seguido del nombre de la aplicaci\u00f3n. Ejemplo: ar . com . nombredelsitioweb . nombredelaapp Launch Screen Assets Imagen, logo o animaci\u00f3n Lotie para agregar a la pantalla de Inicio de la App. Launch Icon Icono para abrir la aplicaci\u00f3n. Para generar los iconos se puede usar: - https://appicon.co/ - https://appiconmaker.co/ - https://easyappicon.com/ Stores Information \u00b6 Google Play \u00b6 Nombre App Es el nombre con el que figura en la tienda. (no se puede cambiar)hasta 50 caracteres. Descripci\u00f3n corta Una descripci\u00f3n de la app corta, hasta 80 caracteres. Descripci\u00f3n larga Descripci\u00f3n detallada de la aplicaci\u00f3n. hasta 4000 caracteres. Icono de la aplicaci\u00f3n (resoluci\u00f3n 512x512 siendo un archivo PNG de 32 bits) Capturas de Pantalla Dependiendo el alcance de la aplicacion se necesitaran capturas de pantallas de todos los tipos de dispositivos. - Mobiles: Srchivo JPEG o PNG de 24 bits(sin alfa). M\u00ednimo 2 capturas, M\u00e1ximo 8. - Tablets: \u00bf? Tipo de Aplicacion Hay que elgir entre dos tipos: - Aplicaci\u00f3n - Juego Categorias Dependiendo el tipo de aplicacion se mostraran diferentes categorias para seleccionar. Etiquetass Estad etiquetas son las palabras claves por las que podr\u00e1 ser indexada la aplicaci\u00f3n en las b\u00fasquedas y estad\u00edsticas. Datos Empresa - Empresa o individuo que va a subir esta aplicaci\u00f3n al Store. - Sitio web. - Correo Electr\u00f3nico de contacto. - Tel\u00e9fono de contacto. - Sitio web de la pol\u00edtica de privacidad(Opcional obligatorio si la app registra usuarios, debe ser una pagina HTML) Apple Store \u00b6 Nombre App Es el nombre con el que figura en la tienda. (no se puede cambiar)hasta 50 caracteres. Descripci\u00f3n corta Una descripci\u00f3n de la app corta, hasta 80 caracteres. Descripci\u00f3n larga Descripci\u00f3n detallada de la aplicaci\u00f3n. hasta 4000 caracteres. Categorias Primaria Dependiendo el tipo de aplicacion se mostraran diferentes categorias para seleccionar. Books, Business, Education, Entertainment, Finance, Games, Health & Fitness, Lifestyles, Medical, Music, Navigation, News, Photo & Video, Productivity, Reference, Social Networking, Sports,Travel, Utilities, Weather Categoria Secundaria Idem Anterior Capturas de Pantalla Dependiendo el alcance de la aplicacion se necesitaran capturas de pantallas de todos los tipos de dispositivos. - Mobiles: Necesitaremos al menos 3 im\u00e1genes de 1242 x 2208 (iPhone 5.5) y 3 im\u00e1genes de 2688 x 1242 (iPhone 6.5 inch), que sean screenshots de la App. - Tablets: \u00bf? Un Texto Promocional El texto promocional le permite informar a sus visitantes de la App Store sobre cualquier caracter\u00edstica actual de la aplicaci\u00f3n sin requerir un env\u00edo actualizado. Este texto aparecer\u00e1 sobre su descripci\u00f3n en la App Store para clientes con dispositivos con iOS 11 o posterior y macOS 10.13 o posterior. Keywords Incluya una o m\u00e1s palabras clave que describan su aplicaci\u00f3n. Las palabras clave hacen que los resultados de b\u00fasqueda de App Store sean m\u00e1s precisos. Separe las palabras clave con una coma. Url de soporte Una URL con informaci\u00f3n de soporte para su aplicaci\u00f3n. Esta URL estar\u00e1 visible en la App Store Marketing Url el cual es opcional. (na URL con informaci\u00f3n de soporte para su aplicaci\u00f3n. Esta URL estar\u00e1 visible en la App Store. Copyright El nombre de la persona o entidad que posee los derechos exclusivos de su aplicaci\u00f3n, precedido por el a\u00f1o en que se obtuvieron los derechos (por ejemplo, \"2008 Acme Inc.\"). No proporcione una URL. App User Test Information Este es un nombre de usuario y contrase\u00f1a que podemos usar para iniciar sesi\u00f3n en su aplicaci\u00f3n, por lo que podemos revisar todas sus funciones. Si los usuarios inician sesi\u00f3n usando las redes sociales, proporcione informaci\u00f3n para una cuenta que podamos usar. Las credenciales deben ser v\u00e1lidas y activas durante la duraci\u00f3n de la revisi\u00f3n. Es necesario crear una cuenta Demo en el ambiente de PROD. Que pueda ser usada por Apple para realizar la revisi\u00f3n. Informaci\u00f3n de Contacto La persona de su organizaci\u00f3n a la que se debe contactar si el equipo de Revisi\u00f3n de aplicaciones tiene alguna pregunta o necesita informaci\u00f3n adicional - Nombre completo - N\u00famero de Contacto directo - Email Informaci\u00f3n adicional sobre su aplicaci\u00f3n que puede ayudar durante el proceso de revisi\u00f3n. Incluya la informaci\u00f3n que pueda ser necesaria para probar su aplicaci\u00f3n, como la configuraci\u00f3n espec\u00edfica de la aplicaci\u00f3n. Datos Empresa - Empresa o individuo que va a subir esta aplicaci\u00f3n al Store. - Sitio web. - Correo Electr\u00f3nico de contacto. - Tel\u00e9fono de contacto. - Sitio web de la pol\u00edtica de privacidad(Opcional obligatorio si la app registra usuarios, debe ser una pagina HTML)","title":"Materiales para las Stores"},{"location":"es/guia/11_materiales_stores/#materiales-para-las-stores-y-algo-mas","text":"Aqui encontraras una recopilacion de las cosas que necesitas antes de deployar el desarrollo en las stores. Materiales para las Stores y algo mas. Cuentas y Credenciales Para Iniciar el Desarrollo Stores Information Google Play Apple Store","title":"Materiales para las Stores y algo mas."},{"location":"es/guia/11_materiales_stores/#cuentas-y-credenciales","text":"Credenciales de acceso a cuenta de Firebase, para integrar Analytics y Crashlytics y Notificacionies Push: En el caso que sea necesario ser necesario. Credenciales de acceso a cuenta de Google Cloud, para generar las api key necesarias para integrar los servicios de google. En el caso que sea necesario ser necesario . Agregar cuenta de los Devs a las cuentas de Apple Store y Google Play con los permisos necesarios, para poder generar los certificados y hacer la publicaci\u00f3n en las stores correspondientes. En el caso que sea necesario ser necesario.","title":"Cuentas y Credenciales"},{"location":"es/guia/11_materiales_stores/#para-iniciar-el-desarrollo","text":"Nombre del Paquete : (no se puede cambiar una vez que se publica en la tienda) Este nombre es un identificador \u00fanico. Generalmente esta conformado por el dominio de la aplicaci\u00f3n invertido, seguido del nombre de la aplicaci\u00f3n. Ejemplo: ar . com . nombredelsitioweb . nombredelaapp Launch Screen Assets Imagen, logo o animaci\u00f3n Lotie para agregar a la pantalla de Inicio de la App. Launch Icon Icono para abrir la aplicaci\u00f3n. Para generar los iconos se puede usar: - https://appicon.co/ - https://appiconmaker.co/ - https://easyappicon.com/","title":"Para Iniciar el Desarrollo"},{"location":"es/guia/11_materiales_stores/#stores-information","text":"","title":"Stores Information"},{"location":"es/guia/11_materiales_stores/#google-play","text":"Nombre App Es el nombre con el que figura en la tienda. (no se puede cambiar)hasta 50 caracteres. Descripci\u00f3n corta Una descripci\u00f3n de la app corta, hasta 80 caracteres. Descripci\u00f3n larga Descripci\u00f3n detallada de la aplicaci\u00f3n. hasta 4000 caracteres. Icono de la aplicaci\u00f3n (resoluci\u00f3n 512x512 siendo un archivo PNG de 32 bits) Capturas de Pantalla Dependiendo el alcance de la aplicacion se necesitaran capturas de pantallas de todos los tipos de dispositivos. - Mobiles: Srchivo JPEG o PNG de 24 bits(sin alfa). M\u00ednimo 2 capturas, M\u00e1ximo 8. - Tablets: \u00bf? Tipo de Aplicacion Hay que elgir entre dos tipos: - Aplicaci\u00f3n - Juego Categorias Dependiendo el tipo de aplicacion se mostraran diferentes categorias para seleccionar. Etiquetass Estad etiquetas son las palabras claves por las que podr\u00e1 ser indexada la aplicaci\u00f3n en las b\u00fasquedas y estad\u00edsticas. Datos Empresa - Empresa o individuo que va a subir esta aplicaci\u00f3n al Store. - Sitio web. - Correo Electr\u00f3nico de contacto. - Tel\u00e9fono de contacto. - Sitio web de la pol\u00edtica de privacidad(Opcional obligatorio si la app registra usuarios, debe ser una pagina HTML)","title":"Google Play"},{"location":"es/guia/11_materiales_stores/#apple-store","text":"Nombre App Es el nombre con el que figura en la tienda. (no se puede cambiar)hasta 50 caracteres. Descripci\u00f3n corta Una descripci\u00f3n de la app corta, hasta 80 caracteres. Descripci\u00f3n larga Descripci\u00f3n detallada de la aplicaci\u00f3n. hasta 4000 caracteres. Categorias Primaria Dependiendo el tipo de aplicacion se mostraran diferentes categorias para seleccionar. Books, Business, Education, Entertainment, Finance, Games, Health & Fitness, Lifestyles, Medical, Music, Navigation, News, Photo & Video, Productivity, Reference, Social Networking, Sports,Travel, Utilities, Weather Categoria Secundaria Idem Anterior Capturas de Pantalla Dependiendo el alcance de la aplicacion se necesitaran capturas de pantallas de todos los tipos de dispositivos. - Mobiles: Necesitaremos al menos 3 im\u00e1genes de 1242 x 2208 (iPhone 5.5) y 3 im\u00e1genes de 2688 x 1242 (iPhone 6.5 inch), que sean screenshots de la App. - Tablets: \u00bf? Un Texto Promocional El texto promocional le permite informar a sus visitantes de la App Store sobre cualquier caracter\u00edstica actual de la aplicaci\u00f3n sin requerir un env\u00edo actualizado. Este texto aparecer\u00e1 sobre su descripci\u00f3n en la App Store para clientes con dispositivos con iOS 11 o posterior y macOS 10.13 o posterior. Keywords Incluya una o m\u00e1s palabras clave que describan su aplicaci\u00f3n. Las palabras clave hacen que los resultados de b\u00fasqueda de App Store sean m\u00e1s precisos. Separe las palabras clave con una coma. Url de soporte Una URL con informaci\u00f3n de soporte para su aplicaci\u00f3n. Esta URL estar\u00e1 visible en la App Store Marketing Url el cual es opcional. (na URL con informaci\u00f3n de soporte para su aplicaci\u00f3n. Esta URL estar\u00e1 visible en la App Store. Copyright El nombre de la persona o entidad que posee los derechos exclusivos de su aplicaci\u00f3n, precedido por el a\u00f1o en que se obtuvieron los derechos (por ejemplo, \"2008 Acme Inc.\"). No proporcione una URL. App User Test Information Este es un nombre de usuario y contrase\u00f1a que podemos usar para iniciar sesi\u00f3n en su aplicaci\u00f3n, por lo que podemos revisar todas sus funciones. Si los usuarios inician sesi\u00f3n usando las redes sociales, proporcione informaci\u00f3n para una cuenta que podamos usar. Las credenciales deben ser v\u00e1lidas y activas durante la duraci\u00f3n de la revisi\u00f3n. Es necesario crear una cuenta Demo en el ambiente de PROD. Que pueda ser usada por Apple para realizar la revisi\u00f3n. Informaci\u00f3n de Contacto La persona de su organizaci\u00f3n a la que se debe contactar si el equipo de Revisi\u00f3n de aplicaciones tiene alguna pregunta o necesita informaci\u00f3n adicional - Nombre completo - N\u00famero de Contacto directo - Email Informaci\u00f3n adicional sobre su aplicaci\u00f3n que puede ayudar durante el proceso de revisi\u00f3n. Incluya la informaci\u00f3n que pueda ser necesaria para probar su aplicaci\u00f3n, como la configuraci\u00f3n espec\u00edfica de la aplicaci\u00f3n. Datos Empresa - Empresa o individuo que va a subir esta aplicaci\u00f3n al Store. - Sitio web. - Correo Electr\u00f3nico de contacto. - Tel\u00e9fono de contacto. - Sitio web de la pol\u00edtica de privacidad(Opcional obligatorio si la app registra usuarios, debe ser una pagina HTML)","title":"Apple Store"},{"location":"es/guia/12_ejemplos/","text":"Ejemplos Flutter / Dart \u00b6 Dart y Flutter viene con una gran variada de ejemplos en su c\u00f3digo fuente. Estos ejemplos los puedes crear y probar utilizando el CLI propio de Flutter/Dart. Para hacerlo: // TODO","title":"Flutter / Dart Sample"},{"location":"es/guia/12_ejemplos/#ejemplos-flutter-dart","text":"Dart y Flutter viene con una gran variada de ejemplos en su c\u00f3digo fuente. Estos ejemplos los puedes crear y probar utilizando el CLI propio de Flutter/Dart. Para hacerlo: // TODO","title":"Ejemplos Flutter / Dart"},{"location":"es/guia/13_enlaces_interesantes/","text":"Enlaces Interesantes \u00b6 Flutter Gems : Colecci\u00f3n de paquetes \u00fatiles. https://fluttergems.dev/ Flutter Architecture samples : Ejemplos de una Flutter App utilizando distintas arquitecturas. https://github.com/brianegan/flutter_architecture_samples Awesome Flutter : Una lista con Librer\u00edas, herramientas, tutoriales y m\u00e1s. https://github.com/Solido/awesome-flutter Lista Oficial de ejemplos : https://github.com/flutter/samples/blob/d500d15c0f098b56e5bd549b32485cedba4843ef/INDEX.md DartPad : Entorno de desarrollo Flutter/Dart online. https://dartpad.dev/ Dart cheatsheet codelab : https://dart.dev/codelabs/dart-cheatsheet","title":"Enlaces Interesantes"},{"location":"es/guia/13_enlaces_interesantes/#enlaces-interesantes","text":"Flutter Gems : Colecci\u00f3n de paquetes \u00fatiles. https://fluttergems.dev/ Flutter Architecture samples : Ejemplos de una Flutter App utilizando distintas arquitecturas. https://github.com/brianegan/flutter_architecture_samples Awesome Flutter : Una lista con Librer\u00edas, herramientas, tutoriales y m\u00e1s. https://github.com/Solido/awesome-flutter Lista Oficial de ejemplos : https://github.com/flutter/samples/blob/d500d15c0f098b56e5bd549b32485cedba4843ef/INDEX.md DartPad : Entorno de desarrollo Flutter/Dart online. https://dartpad.dev/ Dart cheatsheet codelab : https://dart.dev/codelabs/dart-cheatsheet","title":"Enlaces Interesantes"}]}